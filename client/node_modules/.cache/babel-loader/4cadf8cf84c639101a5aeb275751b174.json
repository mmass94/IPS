{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*jslint evil: true, sub: true */\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createArrayFromMixed = require(\"./createArrayFromMixed\");\n\nvar getMarkupWrap = require(\"./getMarkupWrap\");\n\nvar invariant = require(\"./invariant\");\n/**\n * Dummy container used to render all markup.\n */\n\n\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n/**\n * Pattern used by `getNodeName`.\n */\n\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\n\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\n\n\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  \"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode);\n  var nodeName = getNodeName(markup);\n  var wrap = nodeName && getMarkupWrap(nodeName);\n\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n    var wrapDepth = wrap[0];\n\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n\n  if (scripts.length) {\n    \"production\" !== process.env.NODE_ENV ? invariant(handleScript, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(handleScript);\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/createNodesFromMarkup.js"],"names":["ExecutionEnvironment","require","createArrayFromMixed","getMarkupWrap","invariant","dummyNode","canUseDOM","document","createElement","nodeNamePattern","getNodeName","markup","nodeNameMatch","match","toLowerCase","createNodesFromMarkup","handleScript","node","process","env","NODE_ENV","nodeName","wrap","innerHTML","wrapDepth","lastChild","scripts","getElementsByTagName","length","forEach","nodes","childNodes","removeChild","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;AAGA,IAAII,SAAS,GACXL,oBAAoB,CAACM,SAArB,GAAiCC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjC,GAAiE,IADnE;AAGA;;;;AAGA,IAAIC,eAAe,GAAG,YAAtB;AAEA;;;;;;;AAMA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,MAAIC,aAAa,GAAGD,MAAM,CAACE,KAAP,CAAaJ,eAAb,CAApB;AACA,SAAOG,aAAa,IAAIA,aAAa,CAAC,CAAD,CAAb,CAAiBE,WAAjB,EAAxB;AACD;AAED;;;;;;;;;;;;AAUA,SAASC,qBAAT,CAA+BJ,MAA/B,EAAuCK,YAAvC,EAAqD;AACnD,MAAIC,IAAI,GAAGZ,SAAX;AACC,mBAAiBa,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwChB,SAAS,CAAC,CAAC,CAACC,SAAH,EAAc,6CAAd,CAAjD,GAAgHD,SAAS,CAAC,CAAC,CAACC,SAAH,CAA1H;AACA,MAAIgB,QAAQ,GAAGX,WAAW,CAACC,MAAD,CAA1B;AAEA,MAAIW,IAAI,GAAGD,QAAQ,IAAIlB,aAAa,CAACkB,QAAD,CAApC;;AACA,MAAIC,IAAJ,EAAU;AACRL,IAAAA,IAAI,CAACM,SAAL,GAAiBD,IAAI,CAAC,CAAD,CAAJ,GAAUX,MAAV,GAAmBW,IAAI,CAAC,CAAD,CAAxC;AAEA,QAAIE,SAAS,GAAGF,IAAI,CAAC,CAAD,CAApB;;AACA,WAAOE,SAAS,EAAhB,EAAoB;AAClBP,MAAAA,IAAI,GAAGA,IAAI,CAACQ,SAAZ;AACD;AACF,GAPD,MAOO;AACLR,IAAAA,IAAI,CAACM,SAAL,GAAiBZ,MAAjB;AACD;;AAED,MAAIe,OAAO,GAAGT,IAAI,CAACU,oBAAL,CAA0B,QAA1B,CAAd;;AACA,MAAID,OAAO,CAACE,MAAZ,EAAoB;AACjB,qBAAiBV,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwChB,SAAS,CAChDY,YADgD,EAEhD,mEAFgD,CAAjD,GAGGZ,SAAS,CAACY,YAAD,CAHb;AAIAd,IAAAA,oBAAoB,CAACwB,OAAD,CAApB,CAA8BG,OAA9B,CAAsCb,YAAtC;AACD;;AAED,MAAIc,KAAK,GAAG5B,oBAAoB,CAACe,IAAI,CAACc,UAAN,CAAhC;;AACA,SAAOd,IAAI,CAACQ,SAAZ,EAAuB;AACrBR,IAAAA,IAAI,CAACe,WAAL,CAAiBf,IAAI,CAACQ,SAAtB;AACD;;AACD,SAAOK,KAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBnB,qBAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*jslint evil: true, sub: true */\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createArrayFromMixed = require(\"./createArrayFromMixed\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode =\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      handleScript,\n      'createNodesFromMarkup(...): Unexpected <script> element rendered.'\n    ) : invariant(handleScript));\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;\n"]},"metadata":{},"sourceType":"script"}