{"ast":null,"code":"/** @format */\nimport axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { Book_ADDED, Book_ERROR, UPDATE_Book, Delete_ERROR } from \"./types\"; // ADD Book\n\nexport const addBook = (BookTitle, Bookhphoto, BookDescription, BookLink) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    BookTitle,\n    Bookhphoto,\n    BookDescription,\n    BookLink\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/api/books\", body, config);\n    dispatch({\n      type: Book_ADDED,\n      payload: res.data\n    });\n    dispatch(setAlert(\"book has been added\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: Book_ERROR\n    });\n  }\n}; //Delete a book\n\nexport const deletebook = id => async dispatch => {\n  if (window.confirm(\"Are you sure ? this is can NOT be undone!\")) {\n    try {\n      const res = await axios.delete(`http://localhost:5000/api/books/${id}`);\n      dispatch({\n        type: UPDATE_Book\n      });\n      dispatch(setAlert(\"book has been Deleted\", \"success\"));\n    } catch (err) {\n      dispatch({\n        type: Delete_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/apollo/IPS/client/src/actions/Book.js"],"names":["axios","setAlert","Book_ADDED","Book_ERROR","UPDATE_Book","Delete_ERROR","addBook","BookTitle","Bookhphoto","BookDescription","BookLink","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","msg","deletebook","id","window","confirm","delete","statusText","status"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,YAJF,QAKO,SALP,C,CAOA;;AAEA,OAAO,MAAMC,OAAO,GAAG,CACvBC,SADuB,EAEvBC,UAFuB,EAGvBC,eAHuB,EAIvBC,QAJuB,KAKlB,MAAOC,QAAP,IAAoB;AACvB,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC3BT,IAAAA,SAD2B;AAExBC,IAAAA,UAFwB;AAGxBC,IAAAA,eAHwB;AAIxBC,IAAAA;AAJwB,GAAf,CAAb;;AAMA,MAAI;AACF,UAAMO,GAAG,GAAG,MAAMjB,KAAK,CAACkB,IAAN,CAChB,iCADgB,EAEhBJ,IAFgB,EAGhBF,MAHgB,CAAlB;AAMAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEjB,UADC;AAEPkB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAV,IAAAA,QAAQ,CAACV,QAAQ,CAAC,qBAAD,EAAwB,SAAxB,CAAT,CAAR;AACD,GAZD,CAYE,OAAOqB,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWf,QAAQ,CAACV,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDhB,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGD;AACF,CAvCM,C,CAyCP;;AACA,OAAO,MAAMyB,UAAU,GAAIC,EAAD,IAAQ,MAAOlB,QAAP,IAAoB;AACpD,MAAImB,MAAM,CAACC,OAAP,CAAe,2CAAf,CAAJ,EAAiE;AAC/D,QAAI;AACF,YAAMd,GAAG,GAAG,MAAMjB,KAAK,CAACgC,MAAN,CACf,mCAAkCH,EAAG,EADtB,CAAlB;AAGAlB,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEf;AADC,OAAD,CAAR;AAGAO,MAAAA,QAAQ,CAACV,QAAQ,CAAC,uBAAD,EAA0B,SAA1B,CAAT,CAAR;AACD,KARD,CAQE,OAAOqB,GAAP,EAAY;AACZX,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEd,YADC;AAEPe,QAAAA,OAAO,EAAE;AAAEO,UAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaS,UAApB;AAAgCC,UAAAA,MAAM,EAAEZ,GAAG,CAACE,QAAJ,CAAaU;AAArD;AAFF,OAAD,CAAR;AAID;AACF;AACF,CAjBM","sourcesContent":["/** @format */\r\n\r\nimport axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  Book_ADDED,\r\n  Book_ERROR,\r\n  UPDATE_Book,\r\n  Delete_ERROR,\r\n} from \"./types\";\r\n\r\n// ADD Book\r\n\r\nexport const addBook = (\r\nBookTitle,\r\nBookhphoto,\r\nBookDescription,\r\nBookLink,\r\n) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({\r\n   BookTitle,\r\n      Bookhphoto,\r\n      BookDescription,\r\n      BookLink,\r\n  });\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:5000/api/books\",\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: Book_ADDED,\r\n      payload: res.data,\r\n    });\r\n    dispatch(setAlert(\"book has been added\", \"success\"));\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n    dispatch({\r\n      type: Book_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n//Delete a book\r\nexport const deletebook = (id) => async (dispatch) => {\r\n  if (window.confirm(\"Are you sure ? this is can NOT be undone!\")) {\r\n    try {\r\n      const res = await axios.delete(\r\n        `http://localhost:5000/api/books/${id}`\r\n      );\r\n      dispatch({\r\n        type: UPDATE_Book,\r\n      });\r\n      dispatch(setAlert(\"book has been Deleted\", \"success\"));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: Delete_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status },\r\n      });\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}