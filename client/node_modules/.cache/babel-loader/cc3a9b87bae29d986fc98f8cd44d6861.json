{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\n\n\nvar ReactOwner = {\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ReactOwner.isValidOwner(owner), 'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' + 'usually means that you\\'re trying to add a ref to a component that ' + 'doesn\\'t have an owner (that is, was not created inside of another ' + 'component\\'s `render` method). Try rendering this component inside of ' + 'a new top-level component which will hold the ref.') : invariant(ReactOwner.isValidOwner(owner));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ReactOwner.isValidOwner(owner), 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' + 'usually means that you\\'re trying to remove a ref to a component that ' + 'doesn\\'t have an owner (that is, was not created inside of another ' + 'component\\'s `render` method). Try rendering this component inside of ' + 'a new top-level component which will hold the ref.') : invariant(ReactOwner.isValidOwner(owner)); // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n};\nmodule.exports = ReactOwner;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactOwner.js"],"names":["invariant","require","ReactOwner","isValidOwner","object","attachRef","detachRef","addComponentAsRefTo","component","ref","owner","process","env","NODE_ENV","removeComponentAsRefFrom","getPublicInstance","refs","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAIC,UAAU,GAAG;AAEf;;;;;AAKAC,EAAAA,YAAY,EAAE,UAASC,MAAT,EAAiB;AAC7B,WAAO,CAAC,EACLA,MAAM,IACP,OAAOA,MAAM,CAACC,SAAd,KAA4B,UAD3B,IACyC,OAAOD,MAAM,CAACE,SAAd,KAA4B,UAFhE,CAAR;AAID,GAZc;;AAcf;;;;;;;;;AASAC,EAAAA,mBAAmB,EAAE,UAASC,SAAT,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AAClD,qBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCb,SAAS,CAChDE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CADgD,EAEhD,qEACA,qEADA,GAEA,qEAFA,GAGA,wEAHA,GAIA,oDANgD,CAAjD,GAOGV,SAAS,CAACE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CAAD,CAPb;AAQAA,IAAAA,KAAK,CAACL,SAAN,CAAgBI,GAAhB,EAAqBD,SAArB;AACD,GAjCc;;AAmCf;;;;;;;;;AASAM,EAAAA,wBAAwB,EAAE,UAASN,SAAT,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AACvD,qBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCb,SAAS,CAChDE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CADgD,EAEhD,0EACA,wEADA,GAEA,qEAFA,GAGA,wEAHA,GAIA,oDANgD,CAAjD,GAOGV,SAAS,CAACE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CAAD,CAPb,CADwD,CASxD;AACA;;AACA,QAAIA,KAAK,CAACK,iBAAN,GAA0BC,IAA1B,CAA+BP,GAA/B,MAAwCD,SAAS,CAACO,iBAAV,EAA5C,EAA2E;AACzEL,MAAAA,KAAK,CAACJ,SAAN,CAAgBG,GAAhB;AACD;AACF;AA1Dc,CAAjB;AA8DAQ,MAAM,CAACC,OAAP,GAAiBhB,UAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function(object) {\n    return !!(\n      (object &&\n      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')\n    );\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +\n      'usually means that you\\'re trying to add a ref to a component that ' +\n      'doesn\\'t have an owner (that is, was not created inside of another ' +\n      'component\\'s `render` method). Try rendering this component inside of ' +\n      'a new top-level component which will hold the ref.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +\n      'usually means that you\\'re trying to remove a ref to a component that ' +\n      'doesn\\'t have an owner (that is, was not created inside of another ' +\n      'component\\'s `render` method). Try rendering this component inside of ' +\n      'a new top-level component which will hold the ref.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;\n"]},"metadata":{},"sourceType":"script"}