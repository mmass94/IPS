{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n'use strict';\n\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction ReactComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\n\nReactComponent.prototype.setState = function (partialState, callback) {\n  \"production\" !== process.env.NODE_ENV ? invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null);\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    \"production\" !== process.env.NODE_ENV ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : null;\n  }\n\n  ReactUpdateQueue.enqueueSetState(this, partialState);\n\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nReactComponent.prototype.forceUpdate = function (callback) {\n  ReactUpdateQueue.enqueueForceUpdate(this);\n\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var deprecatedAPIs = {\n    getDOMNode: ['getDOMNode', 'Use React.findDOMNode(component) instead.'],\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceProps: ['replaceProps', 'Instead, call React.render again at the top level.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],\n    setProps: ['setProps', 'Instead, call React.render again at the top level.']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    try {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          \"production\" !== process.env.NODE_ENV ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : null;\n          return undefined;\n        }\n      });\n    } catch (x) {// IE will fail on defineProperty (es5-shim/sham too)\n    }\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactComponent.js"],"names":["ReactUpdateQueue","require","invariant","warning","ReactComponent","props","context","prototype","setState","partialState","callback","process","env","NODE_ENV","enqueueSetState","enqueueCallback","forceUpdate","enqueueForceUpdate","deprecatedAPIs","getDOMNode","isMounted","replaceProps","replaceState","setProps","defineDeprecationWarning","methodName","info","Object","defineProperty","get","undefined","x","fnName","hasOwnProperty","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function(partialState, callback) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof partialState === 'object' ||\n    typeof partialState === 'function' ||\n    partialState == null,\n    'setState(...): takes an object of state variables to update or a ' +\n    'function which returns an object of state variables.'\n  ) : invariant(typeof partialState === 'object' ||\n  typeof partialState === 'function' ||\n  partialState == null));\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      partialState != null,\n      'setState(...): You passed an undefined or null state object; ' +\n      'instead, use forceUpdate().'\n    ) : null);\n  }\n  ReactUpdateQueue.enqueueSetState(this, partialState);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function(callback) {\n  ReactUpdateQueue.enqueueForceUpdate(this);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (\"production\" !== process.env.NODE_ENV) {\n  var deprecatedAPIs = {\n    getDOMNode: [\n      'getDOMNode',\n      'Use React.findDOMNode(component) instead.'\n    ],\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n      'componentWillUnmount to prevent memory leaks.'\n    ],\n    replaceProps: [\n      'replaceProps',\n      'Instead, call React.render again at the top level.'\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n      'https://github.com/facebook/react/issues/3236).'\n    ],\n    setProps: [\n      'setProps',\n      'Instead, call React.render again at the top level.'\n    ]\n  };\n  var defineDeprecationWarning = function(methodName, info) {\n    try {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function() {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            '%s(...) is deprecated in plain JavaScript React classes. %s',\n            info[0],\n            info[1]\n          ) : null);\n          return undefined;\n        }\n      });\n    } catch (x) {\n      // IE will fail on defineProperty (es5-shim/sham too)\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;\n"]},"metadata":{},"sourceType":"script"}