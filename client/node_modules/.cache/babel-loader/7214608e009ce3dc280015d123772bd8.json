{"ast":null,"code":"const ACCEPTABLE_CONTENT_TYPE = /^(multipart\\/.+);(.*)$/i;\nconst UNACCEPTABLE_METHODS = ['GET', 'HEAD'];\n/**\n * Ensures the request contains a content body\n * @param  {Object}  req Express req object\n * @returns {Boolean}\n */\n\nconst hasBody = req => {\n  return 'transfer-encoding' in req.headers || 'content-length' in req.headers && req.headers['content-length'] !== '0';\n};\n/**\n * Ensures the request is not using a non-compliant multipart method\n * such as GET or HEAD\n * @param  {Object}  req Express req object\n * @returns {Boolean}\n */\n\n\nconst hasAcceptableMethod = req => !UNACCEPTABLE_METHODS.includes(req.method);\n/**\n * Ensures that only multipart requests are processed by express-fileupload\n * @param  {Object}  req Express req object\n * @returns {Boolean}\n */\n\n\nconst hasAcceptableContentType = req => ACCEPTABLE_CONTENT_TYPE.test(req.headers['content-type']);\n/**\n * Ensures that the request in question is eligible for file uploads\n * @param {Object} req Express req object\n * @returns {Boolean}\n */\n\n\nmodule.exports = req => hasBody(req) && hasAcceptableMethod(req) && hasAcceptableContentType(req);","map":{"version":3,"sources":["C:/Users/apollo/IPS/node_modules/express-fileupload/lib/isEligibleRequest.js"],"names":["ACCEPTABLE_CONTENT_TYPE","UNACCEPTABLE_METHODS","hasBody","req","headers","hasAcceptableMethod","includes","method","hasAcceptableContentType","test","module","exports"],"mappings":"AAAA,MAAMA,uBAAuB,GAAG,yBAAhC;AACA,MAAMC,oBAAoB,GAAG,CAAC,KAAD,EAAQ,MAAR,CAA7B;AAEA;;;;;;AAKA,MAAMC,OAAO,GAAIC,GAAD,IAAS;AACvB,SAAQ,uBAAuBA,GAAG,CAACC,OAA5B,IACJ,oBAAoBD,GAAG,CAACC,OAAxB,IAAmCD,GAAG,CAACC,OAAJ,CAAY,gBAAZ,MAAkC,GADxE;AAED,CAHD;AAKA;;;;;;;;AAMA,MAAMC,mBAAmB,GAAGF,GAAG,IAAI,CAACF,oBAAoB,CAACK,QAArB,CAA8BH,GAAG,CAACI,MAAlC,CAApC;AAEA;;;;;;;AAKA,MAAMC,wBAAwB,GAAGL,GAAG,IAAIH,uBAAuB,CAACS,IAAxB,CAA6BN,GAAG,CAACC,OAAJ,CAAY,cAAZ,CAA7B,CAAxC;AAEA;;;;;;;AAKAM,MAAM,CAACC,OAAP,GAAiBR,GAAG,IAAID,OAAO,CAACC,GAAD,CAAP,IAAgBE,mBAAmB,CAACF,GAAD,CAAnC,IAA4CK,wBAAwB,CAACL,GAAD,CAA5F","sourcesContent":["const ACCEPTABLE_CONTENT_TYPE = /^(multipart\\/.+);(.*)$/i;\nconst UNACCEPTABLE_METHODS = ['GET', 'HEAD'];\n\n/**\n * Ensures the request contains a content body\n * @param  {Object}  req Express req object\n * @returns {Boolean}\n */\nconst hasBody = (req) => {\n  return ('transfer-encoding' in req.headers) ||\n    ('content-length' in req.headers && req.headers['content-length'] !== '0');\n};\n\n/**\n * Ensures the request is not using a non-compliant multipart method\n * such as GET or HEAD\n * @param  {Object}  req Express req object\n * @returns {Boolean}\n */\nconst hasAcceptableMethod = req => !UNACCEPTABLE_METHODS.includes(req.method);\n\n/**\n * Ensures that only multipart requests are processed by express-fileupload\n * @param  {Object}  req Express req object\n * @returns {Boolean}\n */\nconst hasAcceptableContentType = req => ACCEPTABLE_CONTENT_TYPE.test(req.headers['content-type']);\n\n/**\n * Ensures that the request in question is eligible for file uploads\n * @param {Object} req Express req object\n * @returns {Boolean}\n */\nmodule.exports = req => hasBody(req) && hasAcceptableMethod(req) && hasAcceptableContentType(req);\n"]},"metadata":{},"sourceType":"script"}