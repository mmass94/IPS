{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst processMultipart = require('./processMultipart');\n\nconst isEligibleRequest = require('./isEligibleRequest');\n\nconst {\n  buildOptions,\n  debugLog\n} = require('./utilities');\n\nconst DEFAULT_OPTIONS = {\n  debug: false,\n  uploadTimeout: 60000,\n  fileHandler: false,\n  uriDecodeFileNames: false,\n  safeFileNames: false,\n  preserveExtension: false,\n  abortOnLimit: false,\n  responseOnLimit: 'File size limit has been reached',\n  limitHandler: false,\n  createParentPath: false,\n  parseNested: false,\n  useTempFiles: false,\n  tempFileDir: path.join(process.cwd(), 'tmp')\n};\n/**\n * Expose the file upload middleware\n * @param {Object} options - Middleware options.\n * @returns {Function} - express-fileupload middleware.\n */\n\nmodule.exports = options => {\n  const uploadOptions = buildOptions(DEFAULT_OPTIONS, options);\n  return (req, res, next) => {\n    if (!isEligibleRequest(req)) {\n      debugLog(uploadOptions, 'Request is not eligible for file upload!');\n      return next();\n    }\n\n    processMultipart(uploadOptions, req, res, next);\n  };\n};","map":{"version":3,"sources":["C:/Users/apollo/IPS/node_modules/express-fileupload/lib/index.js"],"names":["path","require","processMultipart","isEligibleRequest","buildOptions","debugLog","DEFAULT_OPTIONS","debug","uploadTimeout","fileHandler","uriDecodeFileNames","safeFileNames","preserveExtension","abortOnLimit","responseOnLimit","limitHandler","createParentPath","parseNested","useTempFiles","tempFileDir","join","process","cwd","module","exports","options","uploadOptions","req","res","next"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAA6BJ,OAAO,CAAC,aAAD,CAA1C;;AAEA,MAAMK,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAE,KADe;AAEtBC,EAAAA,aAAa,EAAE,KAFO;AAGtBC,EAAAA,WAAW,EAAE,KAHS;AAItBC,EAAAA,kBAAkB,EAAE,KAJE;AAKtBC,EAAAA,aAAa,EAAE,KALO;AAMtBC,EAAAA,iBAAiB,EAAE,KANG;AAOtBC,EAAAA,YAAY,EAAE,KAPQ;AAQtBC,EAAAA,eAAe,EAAE,kCARK;AAStBC,EAAAA,YAAY,EAAE,KATQ;AAUtBC,EAAAA,gBAAgB,EAAE,KAVI;AAWtBC,EAAAA,WAAW,EAAE,KAXS;AAYtBC,EAAAA,YAAY,EAAE,KAZQ;AAatBC,EAAAA,WAAW,EAAEnB,IAAI,CAACoB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,KAAzB;AAbS,CAAxB;AAgBA;;;;;;AAKAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,QAAMC,aAAa,GAAGtB,YAAY,CAACE,eAAD,EAAkBmB,OAAlB,CAAlC;AACA,SAAO,CAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACzB,QAAI,CAAC1B,iBAAiB,CAACwB,GAAD,CAAtB,EAA6B;AAC3BtB,MAAAA,QAAQ,CAACqB,aAAD,EAAgB,0CAAhB,CAAR;AACA,aAAOG,IAAI,EAAX;AACD;;AACD3B,IAAAA,gBAAgB,CAACwB,aAAD,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,CAAhB;AACD,GAND;AAOD,CATD","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst processMultipart = require('./processMultipart');\nconst isEligibleRequest = require('./isEligibleRequest');\nconst { buildOptions, debugLog } = require('./utilities');\n\nconst DEFAULT_OPTIONS = {\n  debug: false,\n  uploadTimeout: 60000,\n  fileHandler: false,\n  uriDecodeFileNames: false,\n  safeFileNames: false,\n  preserveExtension: false,\n  abortOnLimit: false,\n  responseOnLimit: 'File size limit has been reached',\n  limitHandler: false,\n  createParentPath: false,\n  parseNested: false,\n  useTempFiles: false,\n  tempFileDir: path.join(process.cwd(), 'tmp')\n};\n\n/**\n * Expose the file upload middleware\n * @param {Object} options - Middleware options.\n * @returns {Function} - express-fileupload middleware.\n */\nmodule.exports = (options) => {\n  const uploadOptions = buildOptions(DEFAULT_OPTIONS, options);\n  return (req, res, next) => {\n    if (!isEligibleRequest(req)) {\n      debugLog(uploadOptions, 'Request is not eligible for file upload!');\n      return next();\n    }\n    processMultipart(uploadOptions, req, res, next);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}