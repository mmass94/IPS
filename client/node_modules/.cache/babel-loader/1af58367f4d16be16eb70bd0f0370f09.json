{"ast":null,"code":"'use strict';\n\nconst {\n  isFunc,\n  debugLog,\n  moveFile,\n  promiseCallback,\n  checkAndMakeDir,\n  saveBufferToFile\n} = require('./utilities');\n/**\n * Returns Local function that moves the file to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options - file factory options.\n * @param {Object} fileUploadOptions - middleware options.\n * @returns {Function}\n */\n\n\nconst moveFromTemp = (filePath, options, fileUploadOptions) => (resolve, reject) => {\n  debugLog(fileUploadOptions, `Moving temporary file ${options.tempFilePath} to ${filePath}`);\n  moveFile(options.tempFilePath, filePath, promiseCallback(resolve, reject));\n};\n/**\n * Returns Local function that moves the file from buffer to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options - file factory options.\n * @param {Object} fileUploadOptions - middleware options.\n * @returns {Function}\n */\n\n\nconst moveFromBuffer = (filePath, options, fileUploadOptions) => (resolve, reject) => {\n  debugLog(fileUploadOptions, `Moving uploaded buffer to ${filePath}`);\n  saveBufferToFile(options.buffer, filePath, promiseCallback(resolve, reject));\n};\n\nmodule.exports = (options, fileUploadOptions = {}) => {\n  // see: https://github.com/richardgirges/express-fileupload/issues/14\n  // firefox uploads empty file in case of cache miss when f5ing page.\n  // resulting in unexpected behavior. if there is no file data, the file is invalid.\n  // if (!fileUploadOptions.useTempFiles && !options.buffer.length) return;\n  // Create and return file object.\n  return {\n    name: options.name,\n    data: options.buffer,\n    size: options.size,\n    encoding: options.encoding,\n    tempFilePath: options.tempFilePath,\n    truncated: options.truncated,\n    mimetype: options.mimetype,\n    md5: options.hash,\n    mv: (filePath, callback) => {\n      // Define a propper move function.\n      const moveFunc = fileUploadOptions.useTempFiles ? moveFromTemp(filePath, options, fileUploadOptions) : moveFromBuffer(filePath, options, fileUploadOptions); // Create a folder for a file.\n\n      checkAndMakeDir(fileUploadOptions, filePath); // If callback is passed in, use the callback API, otherwise return a promise.\n\n      return isFunc(callback) ? moveFunc(callback) : new Promise(moveFunc);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/express-fileupload/lib/fileFactory.js"],"names":["isFunc","debugLog","moveFile","promiseCallback","checkAndMakeDir","saveBufferToFile","require","moveFromTemp","filePath","options","fileUploadOptions","resolve","reject","tempFilePath","moveFromBuffer","buffer","module","exports","name","data","size","encoding","truncated","mimetype","md5","hash","mv","callback","moveFunc","useTempFiles","Promise"],"mappings":"AAAA;;AAEA,MAAM;AACJA,EAAAA,MADI;AAEJC,EAAAA,QAFI;AAGJC,EAAAA,QAHI;AAIJC,EAAAA,eAJI;AAKJC,EAAAA,eALI;AAMJC,EAAAA;AANI,IAOFC,OAAO,CAAC,aAAD,CAPX;AASA;;;;;;;;;;AAQA,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,iBAApB,KAA0C,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAClFX,EAAAA,QAAQ,CAACS,iBAAD,EAAqB,yBAAwBD,OAAO,CAACI,YAAa,OAAML,QAAS,EAAjF,CAAR;AACAN,EAAAA,QAAQ,CAACO,OAAO,CAACI,YAAT,EAAuBL,QAAvB,EAAiCL,eAAe,CAACQ,OAAD,EAAUC,MAAV,CAAhD,CAAR;AACD,CAHD;AAKA;;;;;;;;;;AAQA,MAAME,cAAc,GAAG,CAACN,QAAD,EAAWC,OAAX,EAAoBC,iBAApB,KAA0C,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpFX,EAAAA,QAAQ,CAACS,iBAAD,EAAqB,6BAA4BF,QAAS,EAA1D,CAAR;AACAH,EAAAA,gBAAgB,CAACI,OAAO,CAACM,MAAT,EAAiBP,QAAjB,EAA2BL,eAAe,CAACQ,OAAD,EAAUC,MAAV,CAA1C,CAAhB;AACD,CAHD;;AAKAI,MAAM,CAACC,OAAP,GAAiB,CAACR,OAAD,EAAUC,iBAAiB,GAAG,EAA9B,KAAqC;AACpD;AACA;AACA;AACA;AAEA;AACA,SAAO;AACLQ,IAAAA,IAAI,EAAET,OAAO,CAACS,IADT;AAELC,IAAAA,IAAI,EAAEV,OAAO,CAACM,MAFT;AAGLK,IAAAA,IAAI,EAAEX,OAAO,CAACW,IAHT;AAILC,IAAAA,QAAQ,EAAEZ,OAAO,CAACY,QAJb;AAKLR,IAAAA,YAAY,EAAEJ,OAAO,CAACI,YALjB;AAMLS,IAAAA,SAAS,EAAEb,OAAO,CAACa,SANd;AAOLC,IAAAA,QAAQ,EAAEd,OAAO,CAACc,QAPb;AAQLC,IAAAA,GAAG,EAAEf,OAAO,CAACgB,IARR;AASLC,IAAAA,EAAE,EAAE,CAAClB,QAAD,EAAWmB,QAAX,KAAwB;AAC1B;AACA,YAAMC,QAAQ,GAAGlB,iBAAiB,CAACmB,YAAlB,GACbtB,YAAY,CAACC,QAAD,EAAWC,OAAX,EAAoBC,iBAApB,CADC,GAEbI,cAAc,CAACN,QAAD,EAAWC,OAAX,EAAoBC,iBAApB,CAFlB,CAF0B,CAK1B;;AACAN,MAAAA,eAAe,CAACM,iBAAD,EAAoBF,QAApB,CAAf,CAN0B,CAO1B;;AACA,aAAOR,MAAM,CAAC2B,QAAD,CAAN,GAAmBC,QAAQ,CAACD,QAAD,CAA3B,GAAwC,IAAIG,OAAJ,CAAYF,QAAZ,CAA/C;AACD;AAlBI,GAAP;AAoBD,CA3BD","sourcesContent":["'use strict';\n\nconst {\n  isFunc,\n  debugLog,\n  moveFile,\n  promiseCallback,\n  checkAndMakeDir,\n  saveBufferToFile\n} = require('./utilities');\n\n/**\n * Returns Local function that moves the file to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options - file factory options.\n * @param {Object} fileUploadOptions - middleware options.\n * @returns {Function}\n */\nconst moveFromTemp = (filePath, options, fileUploadOptions) => (resolve, reject) => {\n  debugLog(fileUploadOptions, `Moving temporary file ${options.tempFilePath} to ${filePath}`);\n  moveFile(options.tempFilePath, filePath, promiseCallback(resolve, reject));\n};\n\n/**\n * Returns Local function that moves the file from buffer to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options - file factory options.\n * @param {Object} fileUploadOptions - middleware options.\n * @returns {Function}\n */\nconst moveFromBuffer = (filePath, options, fileUploadOptions) => (resolve, reject) => {\n  debugLog(fileUploadOptions, `Moving uploaded buffer to ${filePath}`);\n  saveBufferToFile(options.buffer, filePath, promiseCallback(resolve, reject));\n};\n\nmodule.exports = (options, fileUploadOptions = {}) => {\n  // see: https://github.com/richardgirges/express-fileupload/issues/14\n  // firefox uploads empty file in case of cache miss when f5ing page.\n  // resulting in unexpected behavior. if there is no file data, the file is invalid.\n  // if (!fileUploadOptions.useTempFiles && !options.buffer.length) return;\n  \n  // Create and return file object.\n  return {\n    name: options.name,\n    data: options.buffer,\n    size: options.size,\n    encoding: options.encoding,\n    tempFilePath: options.tempFilePath,\n    truncated: options.truncated,\n    mimetype: options.mimetype,\n    md5: options.hash,\n    mv: (filePath, callback) => {\n      // Define a propper move function.\n      const moveFunc = fileUploadOptions.useTempFiles\n        ? moveFromTemp(filePath, options, fileUploadOptions)\n        : moveFromBuffer(filePath, options, fileUploadOptions);\n      // Create a folder for a file.\n      checkAndMakeDir(fileUploadOptions, filePath);\n      // If callback is passed in, use the callback API, otherwise return a promise.\n      return isFunc(callback) ? moveFunc(callback) : new Promise(moveFunc);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}