{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactContext\n */\n'use strict';\n\nvar assign = require(\"./Object.assign\");\n\nvar emptyObject = require(\"./emptyObject\");\n\nvar warning = require(\"./warning\");\n\nvar didWarn = false;\n/**\n * Keeps track of the current context.\n *\n * The context is automatically passed down the component ownership hierarchy\n * and is accessible via `this.context` on ReactCompositeComponents.\n */\n\nvar ReactContext = {\n  /**\n   * @internal\n   * @type {object}\n   */\n  current: emptyObject,\n\n  /**\n   * Temporarily extends the current context while executing scopedCallback.\n   *\n   * A typical use case might look like\n   *\n   *  render: function() {\n   *    var children = ReactContext.withContext({foo: 'foo'}, () => (\n   *\n   *    ));\n   *    return <div>{children}</div>;\n   *  }\n   *\n   * @param {object} newContext New context to merge into the existing context\n   * @param {function} scopedCallback Callback to run with the new context\n   * @return {ReactComponent|array<ReactComponent>}\n   */\n  withContext: function (newContext, scopedCallback) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(didWarn, 'withContext is deprecated and will be removed in a future version. ' + 'Use a wrapper component with getChildContext instead.') : null;\n      didWarn = true;\n    }\n\n    var result;\n    var previousContext = ReactContext.current;\n    ReactContext.current = assign({}, previousContext, newContext);\n\n    try {\n      result = scopedCallback();\n    } finally {\n      ReactContext.current = previousContext;\n    }\n\n    return result;\n  }\n};\nmodule.exports = ReactContext;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactContext.js"],"names":["assign","require","emptyObject","warning","didWarn","ReactContext","current","withContext","newContext","scopedCallback","process","env","NODE_ENV","result","previousContext","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,KAAd;AAEA;;;;;;;AAMA,IAAIC,YAAY,GAAG;AAEjB;;;;AAIAC,EAAAA,OAAO,EAAEJ,WANQ;;AAQjB;;;;;;;;;;;;;;;;AAgBAK,EAAAA,WAAW,EAAE,UAASC,UAAT,EAAqBC,cAArB,EAAqC;AAChD,QAAI,iBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACxC,uBAAiBF,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCT,OAAO,CAC9CC,OAD8C,EAE9C,wEACA,uDAH8C,CAA/C,GAIG,IAJJ;AAMAA,MAAAA,OAAO,GAAG,IAAV;AACD;;AAED,QAAIS,MAAJ;AACA,QAAIC,eAAe,GAAGT,YAAY,CAACC,OAAnC;AACAD,IAAAA,YAAY,CAACC,OAAb,GAAuBN,MAAM,CAAC,EAAD,EAAKc,eAAL,EAAsBN,UAAtB,CAA7B;;AACA,QAAI;AACFK,MAAAA,MAAM,GAAGJ,cAAc,EAAvB;AACD,KAFD,SAEU;AACRJ,MAAAA,YAAY,CAACC,OAAb,GAAuBQ,eAAvB;AACD;;AACD,WAAOD,MAAP;AACD;AA5CgB,CAAnB;AAgDAE,MAAM,CAACC,OAAP,GAAiBX,YAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactContext\n */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\nvar warning = require(\"./warning\");\n\nvar didWarn = false;\n\n/**\n * Keeps track of the current context.\n *\n * The context is automatically passed down the component ownership hierarchy\n * and is accessible via `this.context` on ReactCompositeComponents.\n */\nvar ReactContext = {\n\n  /**\n   * @internal\n   * @type {object}\n   */\n  current: emptyObject,\n\n  /**\n   * Temporarily extends the current context while executing scopedCallback.\n   *\n   * A typical use case might look like\n   *\n   *  render: function() {\n   *    var children = ReactContext.withContext({foo: 'foo'}, () => (\n   *\n   *    ));\n   *    return <div>{children}</div>;\n   *  }\n   *\n   * @param {object} newContext New context to merge into the existing context\n   * @param {function} scopedCallback Callback to run with the new context\n   * @return {ReactComponent|array<ReactComponent>}\n   */\n  withContext: function(newContext, scopedCallback) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        didWarn,\n        'withContext is deprecated and will be removed in a future version. ' +\n        'Use a wrapper component with getChildContext instead.'\n      ) : null);\n\n      didWarn = true;\n    }\n\n    var result;\n    var previousContext = ReactContext.current;\n    ReactContext.current = assign({}, previousContext, newContext);\n    try {\n      result = scopedCallback();\n    } finally {\n      ReactContext.current = previousContext;\n    }\n    return result;\n  }\n\n};\n\nmodule.exports = ReactContext;\n"]},"metadata":{},"sourceType":"script"}