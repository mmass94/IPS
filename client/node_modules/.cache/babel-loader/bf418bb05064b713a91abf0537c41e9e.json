{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n'use strict';\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\");\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null; // This registry keeps track of wrapper classes around native tags\n\nvar tagToComponentClass = {};\nvar textComponentClass = null;\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  },\n  // Temporary hack since we expect DOM refs to behave like composites,\n  // for this release.\n  injectAutoWrapper: function (wrapperFactory) {\n    autoGenerateWrapperClass = wrapperFactory;\n  }\n};\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\n\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n\n  return componentClass;\n}\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\n\n\nfunction createInternalComponent(element) {\n  \"production\" !== process.env.NODE_ENV ? invariant(genericComponentClass, 'There is no registered component for the tag %s', element.type) : invariant(genericComponentClass);\n  return new genericComponentClass(element.type, element.props);\n}\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\n\n\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\n\n\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\nmodule.exports = ReactNativeComponent;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactNativeComponent.js"],"names":["assign","require","invariant","autoGenerateWrapperClass","genericComponentClass","tagToComponentClass","textComponentClass","ReactNativeComponentInjection","injectGenericComponentClass","componentClass","injectTextComponentClass","injectComponentClasses","componentClasses","injectAutoWrapper","wrapperFactory","getComponentClassForElement","element","type","tag","createInternalComponent","process","env","NODE_ENV","props","createInstanceForText","text","isTextComponent","component","ReactNativeComponent","injection","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,wBAAwB,GAAG,IAA/B;AACA,IAAIC,qBAAqB,GAAG,IAA5B,C,CACA;;AACA,IAAIC,mBAAmB,GAAG,EAA1B;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AAEA,IAAIC,6BAA6B,GAAG;AAClC;AACA;AACAC,EAAAA,2BAA2B,EAAE,UAASC,cAAT,EAAyB;AACpDL,IAAAA,qBAAqB,GAAGK,cAAxB;AACD,GALiC;AAMlC;AACA;AACAC,EAAAA,wBAAwB,EAAE,UAASD,cAAT,EAAyB;AACjDH,IAAAA,kBAAkB,GAAGG,cAArB;AACD,GAViC;AAWlC;AACA;AACAE,EAAAA,sBAAsB,EAAE,UAASC,gBAAT,EAA2B;AACjDZ,IAAAA,MAAM,CAACK,mBAAD,EAAsBO,gBAAtB,CAAN;AACD,GAfiC;AAgBlC;AACA;AACAC,EAAAA,iBAAiB,EAAE,UAASC,cAAT,EAAyB;AAC1CX,IAAAA,wBAAwB,GAAGW,cAA3B;AACD;AApBiC,CAApC;AAuBA;;;;;;;AAMA,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;AAC5C,MAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,UAA5B,EAAwC;AACtC,WAAOD,OAAO,CAACC,IAAf;AACD;;AACD,MAAIC,GAAG,GAAGF,OAAO,CAACC,IAAlB;AACA,MAAIR,cAAc,GAAGJ,mBAAmB,CAACa,GAAD,CAAxC;;AACA,MAAIT,cAAc,IAAI,IAAtB,EAA4B;AAC1BJ,IAAAA,mBAAmB,CAACa,GAAD,CAAnB,GAA2BT,cAAc,GAAGN,wBAAwB,CAACe,GAAD,CAApE;AACD;;AACD,SAAOT,cAAP;AACD;AAED;;;;;;;;AAMA,SAASU,uBAAT,CAAiCH,OAAjC,EAA0C;AACvC,mBAAiBI,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCpB,SAAS,CAChDE,qBADgD,EAEhD,iDAFgD,EAGhDY,OAAO,CAACC,IAHwC,CAAjD,GAIGf,SAAS,CAACE,qBAAD,CAJb;AAKA,SAAO,IAAIA,qBAAJ,CAA0BY,OAAO,CAACC,IAAlC,EAAwCD,OAAO,CAACO,KAAhD,CAAP;AACD;AAED;;;;;;AAIA,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO,IAAInB,kBAAJ,CAAuBmB,IAAvB,CAAP;AACD;AAED;;;;;;AAIA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,SAAOA,SAAS,YAAYrB,kBAA5B;AACD;;AAED,IAAIsB,oBAAoB,GAAG;AACzBb,EAAAA,2BAA2B,EAAEA,2BADJ;AAEzBI,EAAAA,uBAAuB,EAAEA,uBAFA;AAGzBK,EAAAA,qBAAqB,EAAEA,qBAHE;AAIzBE,EAAAA,eAAe,EAAEA,eAJQ;AAKzBG,EAAAA,SAAS,EAAEtB;AALc,CAA3B;AAQAuB,MAAM,CAACC,OAAP,GAAiBH,oBAAjB","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function(componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function(componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function(componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  },\n  // Temporary hack since we expect DOM refs to behave like composites,\n  // for this release.\n  injectAutoWrapper: function(wrapperFactory) {\n    autoGenerateWrapperClass = wrapperFactory;\n  }\n};\n\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n  return componentClass;\n}\n\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    genericComponentClass,\n    'There is no registered component for the tag %s',\n    element.type\n  ) : invariant(genericComponentClass));\n  return new genericComponentClass(element.type, element.props);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;\n"]},"metadata":{},"sourceType":"script"}