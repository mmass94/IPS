{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n'use strict';\n\nvar ReactPropTypes = require(\"./ReactPropTypes\");\n\nvar invariant = require(\"./invariant\");\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(input) {\n  \"production\" !== process.env.NODE_ENV ? invariant(input.props.checkedLink == null || input.props.valueLink == null, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\\'t want to use valueLink and vice versa.') : invariant(input.props.checkedLink == null || input.props.valueLink == null);\n}\n\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n\n  \"production\" !== process.env.NODE_ENV ? invariant(input.props.value == null && input.props.onChange == null, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\\'t want to use valueLink.') : invariant(input.props.value == null && input.props.onChange == null);\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n\n  \"production\" !== process.env.NODE_ENV ? invariant(input.props.checked == null && input.props.onChange == null, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\\'t want to ' + 'use checkedLink') : invariant(input.props.checked == null && input.props.onChange == null);\n}\n/**\n * @param {SyntheticEvent} e change event to handle\n */\n\n\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\n\n\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\n\n\nvar LinkedValueUtils = {\n  Mixin: {\n    propTypes: {\n      value: function (props, propName, componentName) {\n        if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n          return null;\n        }\n\n        return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n      },\n      checked: function (props, propName, componentName) {\n        if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n          return null;\n        }\n\n        return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function (input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n\n      return input.props.valueLink.value;\n    }\n\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function (input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n\n      return input.props.checkedLink.value;\n    }\n\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function (input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n\n      return _handleLinkedCheckChange;\n    }\n\n    return input.props.onChange;\n  }\n};\nmodule.exports = LinkedValueUtils;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/LinkedValueUtils.js"],"names":["ReactPropTypes","require","invariant","hasReadOnlyValue","_assertSingleLink","input","process","env","NODE_ENV","props","checkedLink","valueLink","_assertValueLink","value","onChange","_assertCheckedLink","checked","_handleLinkedValueChange","e","requestChange","target","_handleLinkedCheckChange","LinkedValueUtils","Mixin","propTypes","propName","componentName","type","readOnly","disabled","Error","func","getValue","getChecked","getOnChange","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactPropTypes = require(\"./ReactPropTypes\");\n\nvar invariant = require(\"./invariant\");\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(input) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.checkedLink == null || input.props.valueLink == null,\n    'Cannot provide a checkedLink and a valueLink. If you want to use ' +\n    'checkedLink, you probably don\\'t want to use valueLink and vice versa.'\n  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));\n}\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.value == null && input.props.onChange == null,\n    'Cannot provide a valueLink and a value or onChange event. If you want ' +\n    'to use value or onChange, you probably don\\'t want to use valueLink.'\n  ) : invariant(input.props.value == null && input.props.onChange == null));\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.checked == null && input.props.onChange == null,\n    'Cannot provide a checkedLink and a checked property or onChange event. ' +\n    'If you want to use checked or onChange, you probably don\\'t want to ' +\n    'use checkedLink'\n  ) : invariant(input.props.checked == null && input.props.onChange == null));\n}\n\n/**\n * @param {SyntheticEvent} e change event to handle\n */\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  Mixin: {\n    propTypes: {\n      value: function(props, propName, componentName) {\n        if (!props[propName] ||\n            hasReadOnlyValue[props.type] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return null;\n        }\n        return new Error(\n          'You provided a `value` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultValue`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.'\n        );\n      },\n      checked: function(props, propName, componentName) {\n        if (!props[propName] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return null;\n        }\n        return new Error(\n          'You provided a `checked` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultChecked`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.'\n        );\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return input.props.valueLink.value;\n    }\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function(input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return input.props.checkedLink.value;\n    }\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return _handleLinkedCheckChange;\n    }\n    return input.props.onChange;\n  }\n};\n\nmodule.exports = LinkedValueUtils;\n"]},"metadata":{},"sourceType":"script"}