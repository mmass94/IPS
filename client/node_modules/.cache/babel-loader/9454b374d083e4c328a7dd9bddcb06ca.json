{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LocalEventTrapMixin\n */\n'use strict';\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar accumulateInto = require(\"./accumulateInto\");\n\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar invariant = require(\"./invariant\");\n\nfunction remove(event) {\n  event.remove();\n}\n\nvar LocalEventTrapMixin = {\n  trapBubbledEvent: function (topLevelType, handlerBaseName) {\n    \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()); // If a component renders to null or if another component fatals and causes\n    // the state of the tree to be corrupted, `node` here can be null.\n\n    var node = this.getDOMNode();\n    \"production\" !== process.env.NODE_ENV ? invariant(node, 'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.') : invariant(node);\n    var listener = ReactBrowserEventEmitter.trapBubbledEvent(topLevelType, handlerBaseName, node);\n    this._localEventListeners = accumulateInto(this._localEventListeners, listener);\n  },\n  // trapCapturedEvent would look nearly identical. We don't implement that\n  // method because it isn't currently needed.\n  componentWillUnmount: function () {\n    if (this._localEventListeners) {\n      forEachAccumulated(this._localEventListeners, remove);\n    }\n  }\n};\nmodule.exports = LocalEventTrapMixin;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/LocalEventTrapMixin.js"],"names":["ReactBrowserEventEmitter","require","accumulateInto","forEachAccumulated","invariant","remove","event","LocalEventTrapMixin","trapBubbledEvent","topLevelType","handlerBaseName","process","env","NODE_ENV","isMounted","node","getDOMNode","listener","_localEventListeners","componentWillUnmount","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAtC;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASI,MAAT,CAAgBC,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACD,MAAN;AACD;;AAED,IAAIE,mBAAmB,GAAG;AACxBC,EAAAA,gBAAgB,EAAC,UAASC,YAAT,EAAuBC,eAAvB,EAAwC;AACtD,qBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCT,SAAS,CAAC,KAAKU,SAAL,EAAD,EAAmB,gCAAnB,CAAjD,GAAwGV,SAAS,CAAC,KAAKU,SAAL,EAAD,CAAlH,CADuD,CAEvD;AACA;;AACA,QAAIC,IAAI,GAAG,KAAKC,UAAL,EAAX;AACC,qBAAiBL,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCT,SAAS,CAChDW,IADgD,EAEhD,0EAFgD,CAAjD,GAGGX,SAAS,CAACW,IAAD,CAHb;AAIA,QAAIE,QAAQ,GAAGjB,wBAAwB,CAACQ,gBAAzB,CACbC,YADa,EAEbC,eAFa,EAGbK,IAHa,CAAf;AAKA,SAAKG,oBAAL,GACEhB,cAAc,CAAC,KAAKgB,oBAAN,EAA4BD,QAA5B,CADhB;AAED,GAjBuB;AAmBxB;AACA;AAEAE,EAAAA,oBAAoB,EAAC,YAAW;AAC9B,QAAI,KAAKD,oBAAT,EAA+B;AAC7Bf,MAAAA,kBAAkB,CAAC,KAAKe,oBAAN,EAA4Bb,MAA5B,CAAlB;AACD;AACF;AA1BuB,CAA1B;AA6BAe,MAAM,CAACC,OAAP,GAAiBd,mBAAjB","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LocalEventTrapMixin\n */\n\n'use strict';\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\nfunction remove(event) {\n  event.remove();\n}\n\nvar LocalEventTrapMixin = {\n  trapBubbledEvent:function(topLevelType, handlerBaseName) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));\n    // If a component renders to null or if another component fatals and causes\n    // the state of the tree to be corrupted, `node` here can be null.\n    var node = this.getDOMNode();\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      node,\n      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'\n    ) : invariant(node));\n    var listener = ReactBrowserEventEmitter.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      node\n    );\n    this._localEventListeners =\n      accumulateInto(this._localEventListeners, listener);\n  },\n\n  // trapCapturedEvent would look nearly identical. We don't implement that\n  // method because it isn't currently needed.\n\n  componentWillUnmount:function() {\n    if (this._localEventListeners) {\n      forEachAccumulated(this._localEventListeners, remove);\n    }\n  }\n};\n\nmodule.exports = LocalEventTrapMixin;\n"]},"metadata":{},"sourceType":"script"}