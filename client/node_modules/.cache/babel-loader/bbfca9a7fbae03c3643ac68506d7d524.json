{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n'use strict';\n\nvar Danger = require(\"./Danger\");\n\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar setTextContent = require(\"./setTextContent\");\n\nvar invariant = require(\"./invariant\");\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\n\n\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(childNode, parentNode.childNodes[index] || null);\n}\n/**\n * Operations for updating with DOM children.\n */\n\n\nvar DOMChildrenOperations = {\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update; // Mapping from parent IDs to initial child orderings.\n\n    var initialChildren = null; // List of children that will be moved or removed.\n\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n        \"production\" !== process.env.NODE_ENV ? invariant(updatedChild, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(updatedChild);\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList); // Remove updated children first so that `toIndex` is consistent.\n\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.textContent);\n          break;\n\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n};\nmodule.exports = DOMChildrenOperations;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/DOMChildrenOperations.js"],"names":["Danger","require","ReactMultiChildUpdateTypes","setTextContent","invariant","insertChildAt","parentNode","childNode","index","insertBefore","childNodes","DOMChildrenOperations","dangerouslyReplaceNodeWithMarkup","updateTextContent","processUpdates","updates","markupList","update","initialChildren","updatedChildren","i","length","type","MOVE_EXISTING","REMOVE_NODE","updatedIndex","fromIndex","updatedChild","parentID","process","env","NODE_ENV","push","renderedMarkup","dangerouslyRenderMarkup","j","removeChild","k","INSERT_MARKUP","markupIndex","toIndex","TEXT_CONTENT","textContent","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require(\"./Danger\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar setTextContent = require(\"./setTextContent\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(\n    childNode,\n    parentNode.childNodes[index] || null\n  );\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function(updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||\n          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          updatedChild,\n          'processUpdates(): Unable to find child %s of element. This ' +\n          'probably means the DOM was unexpectedly mutated (e.g., by the ' +\n          'browser), usually due to forgetting a <tbody> when using tables, ' +\n          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +\n          'in an <svg> parent. Try inspecting the child nodes of the element ' +\n          'with React ID `%s`.',\n          updatedIndex,\n          parentID\n        ) : invariant(updatedChild));\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(\n            update.parentNode,\n            renderedMarkup[update.markupIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(\n            update.parentNode,\n            initialChildren[update.parentID][update.fromIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(\n            update.parentNode,\n            update.textContent\n          );\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports = DOMChildrenOperations;\n"]},"metadata":{},"sourceType":"script"}