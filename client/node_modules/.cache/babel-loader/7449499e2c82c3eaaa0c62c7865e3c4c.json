{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n'use strict';\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\n\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar accumulateInto = require(\"./accumulateInto\");\n\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar invariant = require(\"./invariant\");\n/**\n * Internal store for event listeners\n */\n\n\nvar listenerBank = {};\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\n\nvar eventQueue = null;\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\n\nvar executeDispatchesAndRelease = function (event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch; // Plugins can provide custom behavior when dispatching events.\n\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\n\n\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  \"production\" !== process.env.NODE_ENV ? invariant(valid, 'InstanceHandle not injected before use!') : invariant(valid);\n}\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\n\n\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n    },\n    getInstanceHandle: function () {\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!listener || typeof listener === 'function', 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(!listener || typeof listener === 'function');\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);\n\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function () {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    \"production\" !== process.env.NODE_ENV ? invariant(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(!eventQueue);\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\nmodule.exports = EventPluginHub;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/EventPluginHub.js"],"names":["EventPluginRegistry","require","EventPluginUtils","accumulateInto","forEachAccumulated","invariant","listenerBank","eventQueue","executeDispatchesAndRelease","event","executeDispatch","PluginModule","getPluginModuleForEvent","executeDispatchesInOrder","isPersistent","constructor","release","InstanceHandle","validateInstanceHandle","valid","traverseTwoPhase","traverseEnterLeave","process","env","NODE_ENV","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","bankForRegistrationName","getListener","deleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","events","plugins","i","l","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","__purge","__getListenerBank","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease = function(event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid =\n    InstanceHandle &&\n    InstanceHandle.traverseTwoPhase &&\n    InstanceHandle.traverseEnterLeave;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    valid,\n    'InstanceHandle not injected before use!'\n  ) : invariant(valid));\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function(InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function() {\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !listener || typeof listener === 'function',\n      'Expected %s listener to be a function, instead got type %s',\n      registrationName, typeof listener\n    ) : invariant(!listener || typeof listener === 'function'));\n\n    var bankForRegistrationName =\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(\n          topLevelType,\n          topLevelTarget,\n          topLevelTargetID,\n          nativeEvent\n        );\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function(events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function() {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !eventQueue,\n      'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.'\n    ) : invariant(!eventQueue));\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function() {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n"]},"metadata":{},"sourceType":"script"}