{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n'use strict';\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\n\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\n\nvar setInnerHTML = require(\"./setInnerHTML\");\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\n\n\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactDOMComponent.BackendIDOperations`.\n */\n\nvar ReactDOMIDOperations = {\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    \"production\" !== process.env.NODE_ENV ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)); // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    \"production\" !== process.env.NODE_ENV ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name));\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);\n  },\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: function (id, styles) {\n    var node = ReactMount.getNode(id);\n    CSSPropertyOperations.setValueForStyles(node, styles);\n  },\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: function (id, html) {\n    var node = ReactMount.getNode(id);\n    setInnerHTML(node, html);\n  },\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: function (id, content) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.updateTextContent(node, content);\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  updatePropertyByID: 'updatePropertyByID',\n  deletePropertyByID: 'deletePropertyByID',\n  updateStylesByID: 'updateStylesByID',\n  updateInnerHTMLByID: 'updateInnerHTMLByID',\n  updateTextContentByID: 'updateTextContentByID',\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\nmodule.exports = ReactDOMIDOperations;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactDOMIDOperations.js"],"names":["CSSPropertyOperations","require","DOMChildrenOperations","DOMPropertyOperations","ReactMount","ReactPerf","invariant","setInnerHTML","INVALID_PROPERTY_ERRORS","dangerouslySetInnerHTML","style","ReactDOMIDOperations","updatePropertyByID","id","name","value","node","getNode","process","env","NODE_ENV","hasOwnProperty","setValueForProperty","deleteValueForProperty","deletePropertyByID","updateStylesByID","styles","setValueForStyles","updateInnerHTMLByID","html","updateTextContentByID","content","updateTextContent","dangerouslyReplaceNodeWithMarkupByID","markup","dangerouslyReplaceNodeWithMarkup","dangerouslyProcessChildrenUpdates","updates","i","length","parentNode","parentID","processUpdates","measureMethods","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;AAEA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIM,YAAY,GAAGN,OAAO,CAAC,gBAAD,CAA1B;AAEA;;;;;;;;AAMA,IAAIO,uBAAuB,GAAG;AAC5BC,EAAAA,uBAAuB,EACrB,sEAF0B;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAA9B;AAMA;;;;;AAIA,IAAIC,oBAAoB,GAAG;AAEzB;;;;;;;;;AASAC,EAAAA,kBAAkB,EAAE,UAASC,EAAT,EAAaC,IAAb,EAAmBC,KAAnB,EAA0B;AAC5C,QAAIC,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmBJ,EAAnB,CAAX;AACC,qBAAiBK,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCd,SAAS,CAChD,CAACE,uBAAuB,CAACa,cAAxB,CAAuCP,IAAvC,CAD+C,EAEhD,6BAFgD,EAGhDN,uBAAuB,CAACM,IAAD,CAHyB,CAAjD,GAIGR,SAAS,CAAC,CAACE,uBAAuB,CAACa,cAAxB,CAAuCP,IAAvC,CAAF,CAJb,CAF4C,CAQ5C;AACA;AACA;;AACA,QAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBZ,MAAAA,qBAAqB,CAACmB,mBAAtB,CAA0CN,IAA1C,EAAgDF,IAAhD,EAAsDC,KAAtD;AACD,KAFD,MAEO;AACLZ,MAAAA,qBAAqB,CAACoB,sBAAtB,CAA6CP,IAA7C,EAAmDF,IAAnD;AACD;AACF,GA3BwB;;AA6BzB;;;;;;;;AAQAU,EAAAA,kBAAkB,EAAE,UAASX,EAAT,EAAaC,IAAb,EAAmBC,KAAnB,EAA0B;AAC5C,QAAIC,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmBJ,EAAnB,CAAX;AACC,qBAAiBK,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCd,SAAS,CAChD,CAACE,uBAAuB,CAACa,cAAxB,CAAuCP,IAAvC,CAD+C,EAEhD,6BAFgD,EAGhDN,uBAAuB,CAACM,IAAD,CAHyB,CAAjD,GAIGR,SAAS,CAAC,CAACE,uBAAuB,CAACa,cAAxB,CAAuCP,IAAvC,CAAF,CAJb;AAKAX,IAAAA,qBAAqB,CAACoB,sBAAtB,CAA6CP,IAA7C,EAAmDF,IAAnD,EAAyDC,KAAzD;AACD,GA7CwB;;AA+CzB;;;;;;;;AAQAU,EAAAA,gBAAgB,EAAE,UAASZ,EAAT,EAAaa,MAAb,EAAqB;AACrC,QAAIV,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmBJ,EAAnB,CAAX;AACAb,IAAAA,qBAAqB,CAAC2B,iBAAtB,CAAwCX,IAAxC,EAA8CU,MAA9C;AACD,GA1DwB;;AA4DzB;;;;;;;AAOAE,EAAAA,mBAAmB,EAAE,UAASf,EAAT,EAAagB,IAAb,EAAmB;AACtC,QAAIb,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmBJ,EAAnB,CAAX;AACAN,IAAAA,YAAY,CAACS,IAAD,EAAOa,IAAP,CAAZ;AACD,GAtEwB;;AAwEzB;;;;;;;AAOAC,EAAAA,qBAAqB,EAAE,UAASjB,EAAT,EAAakB,OAAb,EAAsB;AAC3C,QAAIf,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmBJ,EAAnB,CAAX;AACAX,IAAAA,qBAAqB,CAAC8B,iBAAtB,CAAwChB,IAAxC,EAA8Ce,OAA9C;AACD,GAlFwB;;AAoFzB;;;;;;;;AAQAE,EAAAA,oCAAoC,EAAE,UAASpB,EAAT,EAAaqB,MAAb,EAAqB;AACzD,QAAIlB,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmBJ,EAAnB,CAAX;AACAX,IAAAA,qBAAqB,CAACiC,gCAAtB,CAAuDnB,IAAvD,EAA6DkB,MAA7D;AACD,GA/FwB;;AAiGzB;;;;;;;AAOAE,EAAAA,iCAAiC,EAAE,UAASC,OAAT,EAAkBH,MAAlB,EAA0B;AAC3D,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCD,MAAAA,OAAO,CAACC,CAAD,CAAP,CAAWE,UAAX,GAAwBpC,UAAU,CAACa,OAAX,CAAmBoB,OAAO,CAACC,CAAD,CAAP,CAAWG,QAA9B,CAAxB;AACD;;AACDvC,IAAAA,qBAAqB,CAACwC,cAAtB,CAAqCL,OAArC,EAA8CH,MAA9C;AACD;AA7GwB,CAA3B;AAgHA7B,SAAS,CAACsC,cAAV,CAAyBhC,oBAAzB,EAA+C,sBAA/C,EAAuE;AACrEC,EAAAA,kBAAkB,EAAE,oBADiD;AAErEY,EAAAA,kBAAkB,EAAE,oBAFiD;AAGrEC,EAAAA,gBAAgB,EAAE,kBAHmD;AAIrEG,EAAAA,mBAAmB,EAAE,qBAJgD;AAKrEE,EAAAA,qBAAqB,EAAE,uBAL8C;AAMrEG,EAAAA,oCAAoC,EAAE,sCAN+B;AAOrEG,EAAAA,iCAAiC,EAAE;AAPkC,CAAvE;AAUAQ,MAAM,CAACC,OAAP,GAAiBlC,oBAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML:\n    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactDOMComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function(id, name, value) {\n    var node = ReactMount.getNode(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n      'updatePropertyByID(...): %s',\n      INVALID_PROPERTY_ERRORS[name]\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: function(id, name, value) {\n    var node = ReactMount.getNode(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n      'updatePropertyByID(...): %s',\n      INVALID_PROPERTY_ERRORS[name]\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);\n  },\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: function(id, styles) {\n    var node = ReactMount.getNode(id);\n    CSSPropertyOperations.setValueForStyles(node, styles);\n  },\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: function(id, html) {\n    var node = ReactMount.getNode(id);\n    setInnerHTML(node, html);\n  },\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: function(id, content) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.updateTextContent(node, content);\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function(updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  updatePropertyByID: 'updatePropertyByID',\n  deletePropertyByID: 'deletePropertyByID',\n  updateStylesByID: 'updateStylesByID',\n  updateInnerHTMLByID: 'updateInnerHTMLByID',\n  updateTextContentByID: 'updateTextContentByID',\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;\n"]},"metadata":{},"sourceType":"script"}