{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\n\n\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\n\n\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length; // Duplicate selection so we can move range without breaking user selection.\n\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\n\n\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n  var currentRange = selection.getRangeAt(0); // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength; // Detect whether the selection is backward.\n\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\n\n\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\n\n\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\nmodule.exports = ReactDOMSelection;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactDOMSelection.js"],"names":["ExecutionEnvironment","require","getNodeForCharacterOffset","getTextContentAccessor","isCollapsed","anchorNode","anchorOffset","focusNode","focusOffset","getIEOffsets","node","selection","document","selectedRange","createRange","selectedLength","text","length","fromStart","duplicate","moveToElementText","setEndPoint","startOffset","endOffset","start","end","getModernOffsets","window","getSelection","rangeCount","currentRange","getRangeAt","isSelectionCollapsed","rangeLength","toString","tempRange","cloneRange","selectNodeContents","setEnd","startContainer","isTempRangeCollapsed","endContainer","detectionRange","setStart","isBackward","collapsed","setIEOffsets","offsets","range","moveStart","moveEnd","select","setModernOffsets","Math","min","extend","temp","startMarker","endMarker","offset","removeAllRanges","addRange","useIEOffsets","canUseDOM","ReactDOMSelection","getOffsets","setOffsets","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(\n    selection.anchorNode,\n    selection.anchorOffset,\n    selection.focusNode,\n    selection.focusOffset\n  );\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(\n    tempRange.startContainer,\n    tempRange.startOffset,\n    tempRange.endContainer,\n    tempRange.endOffset\n  );\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ?\n            start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = (\n  ExecutionEnvironment.canUseDOM &&\n  'selection' in document &&\n  !('getSelection' in window)\n);\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;\n"]},"metadata":{},"sourceType":"script"}