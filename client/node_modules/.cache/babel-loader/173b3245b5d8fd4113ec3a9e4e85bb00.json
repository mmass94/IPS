{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n'use strict';\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\n\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\n\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\n\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\n\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\");\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar warning = require(\"./warning\");\n\nvar MIXINS_KEY = keyOf({\n  mixins: null\n});\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\n\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\nvar injectedMixins = [];\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\n\nvar ReactClassInterface = {\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n};\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\n\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\n  },\n\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      \"production\" !== process.env.NODE_ENV ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : null;\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.\n\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.OVERRIDE_BASE, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE);\n  } // Disallow defining methods more than once unless explicitly allowed.\n\n\n  if (proto.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED);\n  }\n}\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\n\n\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  \"production\" !== process.env.NODE_ENV ? invariant(typeof spec !== 'function', 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(typeof spec !== 'function');\n  \"production\" !== process.env.NODE_ENV ? invariant(!ReactElement.isValidElement(spec), 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(!ReactElement.isValidElement(spec));\n  var proto = Constructor.prototype; // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride\n\n          \"production\" !== process.env.NODE_ENV ? invariant(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)); // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n\n  for (var name in statics) {\n    var property = statics[name];\n\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = (name in RESERVED_SPEC_KEYS);\n    \"production\" !== process.env.NODE_ENV ? invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(!isReserved);\n    var isInherited = (name in Constructor);\n    \"production\" !== process.env.NODE_ENV ? invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(!isInherited);\n    Constructor[name] = property;\n  }\n}\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\n\n\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  \"production\" !== process.env.NODE_ENV ? invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(one && two && typeof one === 'object' && typeof two === 'object');\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      \"production\" !== process.env.NODE_ENV ? invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(one[key] === undefined);\n      one[key] = two[key];\n    }\n  }\n\n  return one;\n}\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\n\n\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\n\n\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\n\n\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n\n    boundMethod.bind = function (newThis) {\n      for (var args = [], $__0 = 1, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]); // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n\n\n      if (newThis !== component && newThis !== null) {\n        \"production\" !== process.env.NODE_ENV ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : null;\n      } else if (!args.length) {\n        \"production\" !== process.env.NODE_ENV ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : null;\n        return boundMethod;\n      }\n\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n\n  return boundMethod;\n}\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\n\n\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(component, ReactErrorUtils.guard(method, component.constructor.displayName + '.' + autoBindKey));\n    }\n  }\n}\n\nvar typeDeprecationDescriptor = {\n  enumerable: false,\n  get: function () {\n    var displayName = this.displayName || this.name || 'Component';\n    \"production\" !== process.env.NODE_ENV ? warning(false, '%s.type is deprecated. Use %s directly to access the class.', displayName, displayName) : null;\n    Object.defineProperty(this, 'type', {\n      value: this\n    });\n    return this;\n  }\n};\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\n\nvar ReactClassMixin = {\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function (newState, callback) {\n    ReactUpdateQueue.enqueueReplaceState(this, newState);\n\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var owner = ReactCurrentOwner.current;\n\n      if (owner !== null) {\n        \"production\" !== process.env.NODE_ENV ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : null;\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n\n    var internalInstance = ReactInstanceMap.get(this);\n    return internalInstance && internalInstance !== ReactLifeCycle.currentlyMountingInstance;\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function (partialProps, callback) {\n    ReactUpdateQueue.enqueueSetProps(this, partialProps);\n\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function (newProps, callback) {\n    ReactUpdateQueue.enqueueReplaceProps(this, newProps);\n\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function () {};\n\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\n\nvar ReactClass = {\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n      if (\"production\" !== process.env.NODE_ENV) {\n        \"production\" !== process.env.NODE_ENV ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : null;\n      } // Wire up auto-binding\n\n\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.state = null; // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n\n      \"production\" !== process.env.NODE_ENV ? invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(typeof initialState === 'object' && !Array.isArray(initialState));\n      this.state = initialState;\n    };\n\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, spec); // Initialize the defaultProps property after all mixins have been merged\n\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.') : invariant(Constructor.prototype.render);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : null;\n    } // Reduce time spent doing lookups by setting these on the prototype.\n\n\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    } // Legacy hook\n\n\n    Constructor.type = Constructor;\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      try {\n        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);\n      } catch (x) {// IE will fail on defineProperty (es5-shim/sham too)\n      }\n    }\n\n    return Constructor;\n  },\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\nmodule.exports = ReactClass;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactClass.js"],"names":["ReactComponent","require","ReactCurrentOwner","ReactElement","ReactErrorUtils","ReactInstanceMap","ReactLifeCycle","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactUpdateQueue","assign","invariant","keyMirror","keyOf","warning","MIXINS_KEY","mixins","SpecPolicy","DEFINE_ONCE","DEFINE_MANY","OVERRIDE_BASE","DEFINE_MANY_MERGED","injectedMixins","ReactClassInterface","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","process","env","NODE_ENV","validateTypeDef","childContext","context","createMergedResultFunction","prop","mixStaticSpecIntoComponent","typeDef","location","propName","hasOwnProperty","validateMethodOverride","proto","name","specPolicy","ReactClassMixin","spec","isValidElement","prototype","property","isReactClassMethod","isAlreadyDefined","markedDontBind","__reactDontBind","isFunction","shouldAutoBind","__reactAutoBindMap","createChainedFunction","isReserved","isInherited","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","mergedResult","a","apply","arguments","b","c","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","newThis","args","$__0","$__1","push","reboundMethod","bindAutoBindMethods","autoBindKey","guard","typeDeprecationDescriptor","enumerable","get","Object","defineProperty","value","replaceState","newState","callback","enqueueReplaceState","enqueueCallback","isMounted","owner","current","_warnedAboutRefsInRender","getName","internalInstance","currentlyMountingInstance","setProps","partialProps","enqueueSetProps","replaceProps","newProps","enqueueReplaceProps","ReactClassComponent","ReactClass","createClass","props","state","initialState","_isMockFunction","Array","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","methodName","type","x","injection","injectMixin","mixin","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar MIXINS_KEY = keyOf({mixins: null});\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(Constructor, childContextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        childContextTypes,\n        ReactPropTypeLocations.childContext\n      );\n    }\n    Constructor.childContextTypes = assign(\n      {},\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(Constructor, contextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        contextTypes,\n        ReactPropTypeLocations.context\n      );\n    }\n    Constructor.contextTypes = assign(\n      {},\n      Constructor.contextTypes,\n      contextTypes\n    );\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function(Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(\n        Constructor.getDefaultProps,\n        getDefaultProps\n      );\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        propTypes,\n        ReactPropTypeLocations.prop\n      );\n    }\n    Constructor.propTypes = assign(\n      {},\n      Constructor.propTypes,\n      propTypes\n    );\n  },\n  statics: function(Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof typeDef[propName] === 'function',\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n        'React.PropTypes.',\n        Constructor.displayName || 'ReactClass',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : null);\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?\n    ReactClassInterface[name] :\n    null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactClassInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactClassInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof spec !== 'function',\n    'ReactClass: You\\'re attempting to ' +\n    'use a component class as a mixin. Instead, just use a regular object.'\n  ) : invariant(typeof spec !== 'function'));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactElement.isValidElement(spec),\n    'ReactClass: You\\'re attempting to ' +\n    'use a component as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactElement.isValidElement(spec)));\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod =\n        ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isReactClassMethod &&\n        !isAlreadyDefined &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            isReactClassMethod && (\n              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)\n            ),\n            'ReactClass: Unexpected spec policy %s for key %s ' +\n            'when mixing in component specs.',\n            specPolicy,\n            name\n          ) : invariant(isReactClassMethod && (\n            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)\n          )));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isReserved,\n      'ReactClass: You are attempting to define a reserved ' +\n      'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n      'as an instance property instead; it will still be accessible on the ' +\n      'constructor.',\n      name\n    ) : invariant(!isReserved));\n\n    var isInherited = name in Constructor;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isInherited,\n      'ReactClass: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be ' +\n      'due to a mixin.',\n      name\n    ) : invariant(!isInherited));\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        one[key] === undefined,\n        'mergeIntoWithNoDuplicateKeys(): ' +\n        'Tried to merge two objects with the same key: `%s`. This conflict ' +\n        'may be due to a mixin; in particular, this may be caused by two ' +\n        'getInitialState() or getDefaultProps() methods returning objects ' +\n        'with clashing keys.',\n        key\n      ) : invariant(one[key] === undefined));\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (\"production\" !== process.env.NODE_ENV) {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'bind(): React component methods may only be bound to the ' +\n          'component instance. See %s',\n          componentName\n        ) : null);\n      } else if (!args.length) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'bind(): You are binding a component method to the component. ' +\n          'React does this for you automatically in a high-performance ' +\n          'way, so you can safely remove this call. See %s',\n          componentName\n        ) : null);\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(\n        component,\n        ReactErrorUtils.guard(\n          method,\n          component.constructor.displayName + '.' + autoBindKey\n        )\n      );\n    }\n  }\n}\n\nvar typeDeprecationDescriptor = {\n  enumerable: false,\n  get: function() {\n    var displayName = this.displayName || this.name || 'Component';\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      '%s.type is deprecated. Use %s directly to access the class.',\n      displayName,\n      displayName\n    ) : null);\n    Object.defineProperty(this, 'type', {\n      value: this\n    });\n    return this;\n  }\n};\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function(newState, callback) {\n    ReactUpdateQueue.enqueueReplaceState(this, newState);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          owner._warnedAboutRefsInRender,\n          '%s is accessing isMounted inside its render() function. ' +\n          'render() should be a pure function of props and state. It should ' +\n          'never access something that requires stale data from the previous ' +\n          'render, such as refs. Move this logic to componentDidMount and ' +\n          'componentDidUpdate instead.',\n          owner.getName() || 'A component'\n        ) : null);\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(this);\n    return (\n      internalInstance &&\n      internalInstance !== ReactLifeCycle.currentlyMountingInstance\n    );\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function(partialProps, callback) {\n    ReactUpdateQueue.enqueueSetProps(this, partialProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function(newProps, callback) {\n    ReactUpdateQueue.enqueueReplaceProps(this, newProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function() {};\nassign(\n  ReactClassComponent.prototype,\n  ReactComponent.prototype,\n  ReactClassMixin\n);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function(props, context) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n          'JSX instead. See: https://fb.me/react-legacyfactory'\n        ) : null);\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (\"production\" !== process.env.NODE_ENV) {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' &&\n            this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, Constructor)\n    );\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n        'The name is phrased as a question because the function is ' +\n        'expected to return a value.',\n        spec.displayName || 'A component'\n      ) : null);\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    // Legacy hook\n    Constructor.type = Constructor;\n    if (\"production\" !== process.env.NODE_ENV) {\n      try {\n        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);\n      } catch (x) {\n        // IE will fail on defineProperty (es5-shim/sham too)\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;\n"]},"metadata":{},"sourceType":"script"}