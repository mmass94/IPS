{"ast":null,"code":"const crypto = require('crypto');\n\nconst {\n  debugLog\n} = require('./utilities');\n/**\n * memHandler - In memory upload handler\n * @param {Object} options\n * @param {String} fieldname\n * @param {String} filename\n * @returns {Object}\n */\n\n\nmodule.exports = (options, fieldname, filename) => {\n  const buffers = [];\n  const hash = crypto.createHash('md5');\n  let fileSize = 0;\n  let completed = false;\n\n  const getBuffer = () => Buffer.concat(buffers, fileSize);\n\n  return {\n    dataHandler: data => {\n      if (completed === true) {\n        debugLog(options, `Error: got ${fieldname}->${filename} data chunk for completed upload!`);\n        return;\n      }\n\n      buffers.push(data);\n      hash.update(data);\n      fileSize += data.length;\n      debugLog(options, `Uploading ${fieldname}->${filename}, bytes:${fileSize}...`);\n    },\n    getBuffer: getBuffer,\n    getFilePath: () => '',\n    getFileSize: () => fileSize,\n    getHash: () => hash.digest('hex'),\n    complete: () => {\n      debugLog(options, `Upload ${fieldname}->${filename} completed, bytes:${fileSize}.`);\n      completed = true;\n      return getBuffer();\n    },\n    cleanup: () => {\n      completed = true;\n    },\n    getWritePromise: () => Promise.resolve()\n  };\n};","map":{"version":3,"sources":["C:/Users/apollo/IPS/node_modules/express-fileupload/lib/memHandler.js"],"names":["crypto","require","debugLog","module","exports","options","fieldname","filename","buffers","hash","createHash","fileSize","completed","getBuffer","Buffer","concat","dataHandler","data","push","update","length","getFilePath","getFileSize","getHash","digest","complete","cleanup","getWritePromise","Promise","resolve"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,aAAD,CAA5B;AAEA;;;;;;;;;AAOAE,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAD,EAAUC,SAAV,EAAqBC,QAArB,KAAkC;AACjD,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,IAAI,GAAGT,MAAM,CAACU,UAAP,CAAkB,KAAlB,CAAb;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,SAAS,GAAG,KAAhB;;AAEA,QAAMC,SAAS,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcP,OAAd,EAAuBG,QAAvB,CAAxB;;AAEA,SAAO;AACLK,IAAAA,WAAW,EAAGC,IAAD,IAAU;AACrB,UAAIL,SAAS,KAAK,IAAlB,EAAwB;AACtBV,QAAAA,QAAQ,CAACG,OAAD,EAAW,cAAaC,SAAU,KAAIC,QAAS,mCAA/C,CAAR;AACA;AACD;;AACDC,MAAAA,OAAO,CAACU,IAAR,CAAaD,IAAb;AACAR,MAAAA,IAAI,CAACU,MAAL,CAAYF,IAAZ;AACAN,MAAAA,QAAQ,IAAIM,IAAI,CAACG,MAAjB;AACAlB,MAAAA,QAAQ,CAACG,OAAD,EAAW,aAAYC,SAAU,KAAIC,QAAS,WAAUI,QAAS,KAAjE,CAAR;AACD,KAVI;AAWLE,IAAAA,SAAS,EAAEA,SAXN;AAYLQ,IAAAA,WAAW,EAAE,MAAM,EAZd;AAaLC,IAAAA,WAAW,EAAE,MAAMX,QAbd;AAcLY,IAAAA,OAAO,EAAE,MAAMd,IAAI,CAACe,MAAL,CAAY,KAAZ,CAdV;AAeLC,IAAAA,QAAQ,EAAE,MAAM;AACdvB,MAAAA,QAAQ,CAACG,OAAD,EAAW,UAASC,SAAU,KAAIC,QAAS,qBAAoBI,QAAS,GAAxE,CAAR;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA,aAAOC,SAAS,EAAhB;AACD,KAnBI;AAoBLa,IAAAA,OAAO,EAAE,MAAM;AAAEd,MAAAA,SAAS,GAAG,IAAZ;AAAmB,KApB/B;AAqBLe,IAAAA,eAAe,EAAE,MAAMC,OAAO,CAACC,OAAR;AArBlB,GAAP;AAuBD,CA/BD","sourcesContent":["const crypto = require('crypto');\nconst { debugLog } = require('./utilities');\n\n/**\n * memHandler - In memory upload handler\n * @param {Object} options\n * @param {String} fieldname\n * @param {String} filename\n * @returns {Object}\n */\nmodule.exports = (options, fieldname, filename) => {\n  const buffers = [];\n  const hash = crypto.createHash('md5');\n  let fileSize = 0;\n  let completed = false;\n\n  const getBuffer = () => Buffer.concat(buffers, fileSize);\n\n  return {\n    dataHandler: (data) => {\n      if (completed === true) {\n        debugLog(options, `Error: got ${fieldname}->${filename} data chunk for completed upload!`);\n        return;\n      }\n      buffers.push(data);\n      hash.update(data);\n      fileSize += data.length;\n      debugLog(options, `Uploading ${fieldname}->${filename}, bytes:${fileSize}...`);\n    },\n    getBuffer: getBuffer,\n    getFilePath: () => '',\n    getFileSize: () => fileSize,\n    getHash: () => hash.digest('hex'),\n    complete: () => {\n      debugLog(options, `Upload ${fieldname}->${filename} completed, bytes:${fileSize}.`);\n      completed = true;\n      return getBuffer();\n    },\n    cleanup: () => { completed = true; },\n    getWritePromise: () => Promise.resolve()\n  };\n};\n"]},"metadata":{},"sourceType":"script"}