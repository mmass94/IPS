function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export var validateStyles = function validateStyles(styles, computedOptions, options) {
  if (process.env.NODE_ENV !== 'production') {
    if (!computedOptions) throw Error('Passing `computedOptions` is required.');

    if (!computedOptions.useCssModules) {
      throw Error('Cannot validate global CSS.');
    }

    var userSetUseCssModules = options ? options.useCssModules : false;

    if (!Object.prototype.hasOwnProperty.call(styles, 'flag-icon')) {
      var readme = 'https://github.com/matteocng/react-flag-icon-css/blob/master/README.md';
      var readmeModules = 'https://github.com/gajus/react-css-modules#usage';
      console.error("Warning: Detected configuration mismatch/error: [react-flag-icon-css] FlagIconFactory tried to build FlagIcon with the option 'useCssModules' set to true (".concat(userSetUseCssModules ? 'by you' : 'default', "), but it seems that your environment is not loading the stylesheets in the appropriate way. Two possibilities: \n\n 1. Your project is not using CSS Modules / you don't want to use them. Try building FlagIcon like this: \n\n\timport * as React from 'react' \n\n\tconst FlagIcon = FlagIconFactory(React, { useCssModules: false }) \n\n\tSee the README for more info: ").concat(readme, " \n\n 2. You are using CSS Modules but your module bundler e.g Webpack is not correctly set up for CSS modules. If you are using Webpack, the key modules to set up are 'style-loader', 'css-loader' and 'extract-text-webpack-plugin' ('sass-loader' also comes into play if you are using SASS). The link below may help you:\n\n\t").concat(readmeModules));
    }
  }
};
export default (function (styles, options) {
  return options && options.themeStyles ? _objectSpread({}, styles, options.themeStyles) : styles;
});