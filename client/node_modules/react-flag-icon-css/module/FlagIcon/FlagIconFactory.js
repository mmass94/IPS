function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import FlagIcon from './FlagIcon';
import styles from '../styles';
import { makeStyles, makeFlagIconOptions } from '../functions';
import { getCountryCodes } from '../functions/props';
import { validateStyles } from '../functions/styles';
import { MakeFlagIconPropsType } from '../types/propTypes';

var FlagIconFactory = function FlagIconFactory(React, options) {
  var computedOptions = makeFlagIconOptions(options);
  var useCssModules = computedOptions.useCssModules,
      customCodes = computedOptions.customCodes;
  var FlagIconComponent = null;

  if (useCssModules) {
    var computedStyles = makeStyles(styles, options);

    if (process.env.NODE_ENV !== 'production') {
      validateStyles(computedStyles, computedOptions, options);
    }

    FlagIconComponent = FlagIcon(React, computedOptions, computedStyles);
  } else {
    FlagIconComponent = FlagIcon(React, computedOptions);
  }

  FlagIconComponent.displayName = 'FlagIcon';

  if (process.env.NODE_ENV !== 'production') {
    var codes = getCountryCodes();

    if (customCodes) {
      codes = [].concat(_toConsumableArray(codes), _toConsumableArray(Object.keys(customCodes)));
    }

    FlagIconComponent.propTypes = MakeFlagIconPropsType(codes);
  }

  return FlagIconComponent;
};

export default FlagIconFactory;

var CustomFlagIconFactory = function CustomFlagIconFactory(React, options) {
  return FlagIconFactory(React, options);
};

export { CustomFlagIconFactory };