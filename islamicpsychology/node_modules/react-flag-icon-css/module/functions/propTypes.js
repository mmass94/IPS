var _this = this;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fnThemeStylesValidator = function fnThemeStylesValidator(propsObject, propsValues, propName, componentName) {
  var useCssModules = propsValues.useCssModules,
      customCodes = propsValues.customCodes;
  if (!useCssModules) return;

  if (customCodes) {
    var themeStyles = propsValues.themeStyles;

    if (themeStyles) {
      var themeStylesClassNames = Object.keys(themeStyles);
      var result = Object.keys(customCodes).filter(function (customCode) {
        return !themeStylesClassNames.includes("flag-icon-".concat(customCode));
      });

      if (result.length > 0) {
        return new Error("Invalid prop(s) `themeStyles` supplied to `".concat(componentName, "`, expected `.flag-icon-[").concat(result.join('/'), "]`."));
      }
    } else {
      return new Error("Missing required prop(s) `themeStyles` supplied to `".concat(componentName, "`."));
    }
  }
};

export var AddThemeStylesValidator = function AddThemeStylesValidator(obj) {
  var validatorKeyName = '__themeStyles__';

  if (Object.prototype.hasOwnProperty.call(obj, validatorKeyName)) {
    return obj;
  }

  return _objectSpread({}, obj, _defineProperty({}, validatorKeyName, fnThemeStylesValidator.bind(_this, obj)));
};

var fnNoExtraPropsValidator = function fnNoExtraPropsValidator(propsObject, propsValues, propName, componentName) {
  var passedPropNames = Object.keys(propsValues);
  var extra = passedPropNames.filter(function (prop) {
    return !Object.prototype.hasOwnProperty.call(propsObject, prop);
  });

  if (extra.length > 0) {
    return new Error("Invalid prop(s) ".concat(JSON.stringify(extra), " supplied to `").concat(componentName, "`, expected one of [").concat(passedPropNames.join(','), "]."));
  }
};

export var AddNoExtraPropsValidator = function AddNoExtraPropsValidator(obj) {
  var validatorKeyName = '__no__extra__props__validator___';

  if (Object.prototype.hasOwnProperty.call(obj, validatorKeyName)) {
    return obj;
  }

  return _objectSpread({}, obj, _defineProperty({}, validatorKeyName, fnNoExtraPropsValidator.bind(_this, obj)));
};