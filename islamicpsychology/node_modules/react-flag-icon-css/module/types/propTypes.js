function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import PropTypes from 'prop-types';
import { getRotates, getFlips, getSizes } from '../functions/props';
import { AddNoExtraPropsValidator, AddThemeStylesValidator } from '../functions/propTypes';
var FlagIconSizeType = PropTypes.oneOf(getSizes());
var FlagIconRotateType = PropTypes.oneOf(getRotates());
var FlagIconFlipType = PropTypes.oneOf(getFlips());

var makeFlagIconCodeType = function makeFlagIconCodeType(codes) {
  return PropTypes.oneOf(codes);
};

var makeFlagIconClassesObject = function makeFlagIconClassesObject(codes) {
  return {
    code: makeFlagIconCodeType(codes).isRequired,
    size: FlagIconSizeType,
    squared: PropTypes.bool,
    rotate: FlagIconRotateType,
    flip: FlagIconFlipType,
    className: PropTypes.string,
    styleName: PropTypes.string
  };
};

var makeFlagIconPropsTypeObject = function makeFlagIconPropsTypeObject(codes) {
  return _objectSpread({}, makeFlagIconClassesObject(codes), {
    children: PropTypes.element,
    Component: PropTypes.string
  });
};

export var MakeFlagIconPropsType = function MakeFlagIconPropsType(codes) {
  return AddNoExtraPropsValidator(makeFlagIconPropsTypeObject(codes));
};
var flagIconOptionsType = {
  customCodes: PropTypes.object,
  themeStyles: PropTypes.object,
  useCssModules: PropTypes.bool
};
export var MakeFlagIconOptionsPropType = function MakeFlagIconOptionsPropType() {
  return AddNoExtraPropsValidator(AddThemeStylesValidator(flagIconOptionsType));
};