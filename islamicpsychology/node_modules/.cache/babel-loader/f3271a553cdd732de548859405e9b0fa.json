{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n'use strict';\n\nvar ReactRootIndex = require(\"./ReactRootIndex\");\n\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\n\nvar MAX_TREE_DEPTH = 100;\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\n\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\n\n\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\n\n\nfunction isValidID(id) {\n  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;\n}\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\n\n\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);\n}\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\n\n\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\n\n\nfunction getNextDescendantID(ancestorID, destinationID) {\n  \"production\" !== process.env.NODE_ENV ? invariant(isValidID(ancestorID) && isValidID(destinationID), 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(isValidID(ancestorID) && isValidID(destinationID));\n  \"production\" !== process.env.NODE_ENV ? invariant(isAncestorIDOf(ancestorID, destinationID), 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(isAncestorIDOf(ancestorID, destinationID));\n\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  } // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n\n\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  var i;\n\n  for (i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n\n  return destinationID.substr(0, i);\n}\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\n\n\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n\n  if (minLength === 0) {\n    return '';\n  }\n\n  var lastCommonMarkerIndex = 0; // Use `<=` to traverse until the \"EOL\" of the shorter string.\n\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  \"production\" !== process.env.NODE_ENV ? invariant(isValidID(longestCommonID), 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(isValidID(longestCommonID));\n  return longestCommonID;\n}\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\n\n\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  \"production\" !== process.env.NODE_ENV ? invariant(start !== stop, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(start !== stop);\n  var traverseUp = isAncestorIDOf(stop, start);\n  \"production\" !== process.env.NODE_ENV ? invariant(traverseUp || isAncestorIDOf(start, stop), 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(traverseUp || isAncestorIDOf(start, stop)); // Traverse from `start` to `stop` one depth at a time.\n\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n\n  for (var id = start;;\n  /* until break */\n  id = traverse(id, stop)) {\n    var ret;\n\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(depth++ < MAX_TREE_DEPTH, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop) : invariant(depth++ < MAX_TREE_DEPTH);\n  }\n}\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\n\n\nvar ReactInstanceHandles = {\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function () {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function (rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function (id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function (targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n  isAncestorIDOf: isAncestorIDOf,\n  SEPARATOR: SEPARATOR\n};\nmodule.exports = ReactInstanceHandles;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactInstanceHandles.js"],"names":["ReactRootIndex","require","invariant","SEPARATOR","SEPARATOR_LENGTH","length","MAX_TREE_DEPTH","getReactRootIDString","index","toString","isBoundary","id","charAt","isValidID","isAncestorIDOf","ancestorID","descendantID","indexOf","getParentID","substr","lastIndexOf","getNextDescendantID","destinationID","process","env","NODE_ENV","start","i","getFirstCommonAncestorID","oneID","twoID","minLength","Math","min","lastCommonMarkerIndex","longestCommonID","traverseParentPath","stop","cb","arg","skipFirst","skipLast","traverseUp","depth","traverse","ret","ReactInstanceHandles","createReactRootID","createReactRootIndex","createReactID","rootID","name","getReactRootIDFromNodeID","traverseEnterLeave","leaveID","enterID","upArg","downArg","traverseTwoPhase","targetID","traverseAncestors","_getFirstCommonAncestorID","_getNextDescendantID","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactRootIndex = require(\"./ReactRootIndex\");\n\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH = 100;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id === '' || (\n    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR\n  );\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return (\n    descendantID.indexOf(ancestorID) === 0 &&\n    isBoundary(descendantID, ancestorID.length)\n  );\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isValidID(ancestorID) && isValidID(destinationID),\n    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',\n    ancestorID,\n    destinationID\n  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isAncestorIDOf(ancestorID, destinationID),\n    'getNextDescendantID(...): React has made an invalid assumption about ' +\n    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',\n    ancestorID,\n    destinationID\n  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  var i;\n  for (i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n  if (minLength === 0) {\n    return '';\n  }\n  var lastCommonMarkerIndex = 0;\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isValidID(longestCommonID),\n    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',\n    oneID,\n    twoID,\n    longestCommonID\n  ) : invariant(isValidID(longestCommonID)));\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    start !== stop,\n    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',\n    start\n  ) : invariant(start !== stop));\n  var traverseUp = isAncestorIDOf(stop, start);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    traverseUp || isAncestorIDOf(start, stop),\n    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +\n    'not have a parent path.',\n    start,\n    stop\n  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n  for (var id = start; /* until break */; id = traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      depth++ < MAX_TREE_DEPTH,\n      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +\n      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',\n      start, stop\n    ) : invariant(depth++ < MAX_TREE_DEPTH));\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles = {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function() {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function(rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function(id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function(targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function(targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports = ReactInstanceHandles;\n"]},"metadata":{},"sourceType":"script"}