{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nvar injected = false;\nvar ReactComponentEnvironment = {\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n  injection: {\n    injectEnvironment: function (environment) {\n      \"production\" !== process.env.NODE_ENV ? invariant(!injected, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(!injected);\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n};\nmodule.exports = ReactComponentEnvironment;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactComponentEnvironment.js"],"names":["invariant","require","injected","ReactComponentEnvironment","unmountIDFromEnvironment","replaceNodeWithMarkupByID","processChildrenUpdates","injection","injectEnvironment","environment","process","env","NODE_ENV","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,QAAQ,GAAG,KAAf;AAEA,IAAIC,yBAAyB,GAAG;AAE9B;;;;;AAKAC,EAAAA,wBAAwB,EAAE,IAPI;;AAS9B;;;;AAIAC,EAAAA,yBAAyB,EAAE,IAbG;;AAe9B;;;;AAIAC,EAAAA,sBAAsB,EAAE,IAnBM;AAqB9BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,iBAAiB,EAAE,UAASC,WAAT,EAAsB;AACtC,uBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChD,CAACE,QAD+C,EAEhD,uEAFgD,CAAjD,GAGGF,SAAS,CAAC,CAACE,QAAF,CAHb;AAIAC,MAAAA,yBAAyB,CAACC,wBAA1B,GACEK,WAAW,CAACL,wBADd;AAEAD,MAAAA,yBAAyB,CAACE,yBAA1B,GACEI,WAAW,CAACJ,yBADd;AAEAF,MAAAA,yBAAyB,CAACG,sBAA1B,GACEG,WAAW,CAACH,sBADd;AAEAJ,MAAAA,QAAQ,GAAG,IAAX;AACD;AAbQ;AArBmB,CAAhC;AAuCAW,MAAM,CAACC,OAAP,GAAiBX,yBAAjB","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function(environment) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !injected,\n        'ReactCompositeComponent: injectEnvironment() can only be called once.'\n      ) : invariant(!injected));\n      ReactComponentEnvironment.unmountIDFromEnvironment =\n        environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID =\n        environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates =\n        environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;\n"]},"metadata":{},"sourceType":"script"}