{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\");\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\n\n\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\nassign(CallbackQueue.prototype, {\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function (callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n\n    this._callbacks.push(callback);\n\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function () {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n\n    if (callbacks) {\n      \"production\" !== process.env.NODE_ENV ? invariant(callbacks.length === contexts.length, 'Mismatched list of contexts in callback queue') : invariant(callbacks.length === contexts.length);\n      this._callbacks = null;\n      this._contexts = null;\n\n      for (var i = 0, l = callbacks.length; i < l; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function () {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function () {\n    this.reset();\n  }\n});\nPooledClass.addPoolingTo(CallbackQueue);\nmodule.exports = CallbackQueue;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/CallbackQueue.js"],"names":["PooledClass","require","assign","invariant","CallbackQueue","_callbacks","_contexts","prototype","enqueue","callback","context","push","notifyAll","callbacks","contexts","process","env","NODE_ENV","length","i","l","call","reset","destructor","addPoolingTo","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;AAWA,SAASG,aAAT,GAAyB;AACvB,OAAKC,UAAL,GAAkB,IAAlB;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACD;;AAEDJ,MAAM,CAACE,aAAa,CAACG,SAAf,EAA0B;AAE9B;;;;;;;AAOAC,EAAAA,OAAO,EAAE,UAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACnC,SAAKL,UAAL,GAAkB,KAAKA,UAAL,IAAmB,EAArC;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,IAAkB,EAAnC;;AACA,SAAKD,UAAL,CAAgBM,IAAhB,CAAqBF,QAArB;;AACA,SAAKH,SAAL,CAAeK,IAAf,CAAoBD,OAApB;AACD,GAd6B;;AAgB9B;;;;;;AAMAE,EAAAA,SAAS,EAAE,YAAW;AACpB,QAAIC,SAAS,GAAG,KAAKR,UAArB;AACA,QAAIS,QAAQ,GAAG,KAAKR,SAApB;;AACA,QAAIO,SAAJ,EAAe;AACZ,uBAAiBE,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCd,SAAS,CAChDU,SAAS,CAACK,MAAV,KAAqBJ,QAAQ,CAACI,MADkB,EAEhD,+CAFgD,CAAjD,GAGGf,SAAS,CAACU,SAAS,CAACK,MAAV,KAAqBJ,QAAQ,CAACI,MAA/B,CAHb;AAIA,WAAKb,UAAL,GAAkB,IAAlB;AACA,WAAKC,SAAL,GAAiB,IAAjB;;AACA,WAAK,IAAIa,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGP,SAAS,CAACK,MAA9B,EAAsCC,CAAC,GAAGC,CAA1C,EAA6CD,CAAC,EAA9C,EAAkD;AAChDN,QAAAA,SAAS,CAACM,CAAD,CAAT,CAAaE,IAAb,CAAkBP,QAAQ,CAACK,CAAD,CAA1B;AACD;;AACDN,MAAAA,SAAS,CAACK,MAAV,GAAmB,CAAnB;AACAJ,MAAAA,QAAQ,CAACI,MAAT,GAAkB,CAAlB;AACD;AACF,GAtC6B;;AAwC9B;;;;;AAKAI,EAAAA,KAAK,EAAE,YAAW;AAChB,SAAKjB,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACD,GAhD6B;;AAkD9B;;;AAGAiB,EAAAA,UAAU,EAAE,YAAW;AACrB,SAAKD,KAAL;AACD;AAvD6B,CAA1B,CAAN;AA2DAtB,WAAW,CAACwB,YAAZ,CAAyBpB,aAAzB;AAEAqB,MAAM,CAACC,OAAP,GAAiBtB,aAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\nassign(CallbackQueue.prototype, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function(callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function() {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n    if (callbacks) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        callbacks.length === contexts.length,\n        'Mismatched list of contexts in callback queue'\n      ) : invariant(callbacks.length === contexts.length));\n      this._callbacks = null;\n      this._contexts = null;\n      for (var i = 0, l = callbacks.length; i < l; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function() {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function() {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports = CallbackQueue;\n"]},"metadata":{},"sourceType":"script"}