{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactClass = require(\"./ReactClass\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar select = ReactElement.createFactory('select');\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  /*jshint validthis:true */\n  if (this._pendingUpdate) {\n    this._pendingUpdate = false;\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null && this.isMounted()) {\n      updateOptions(this, value);\n    }\n  }\n}\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\n\n\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be an array if \" + \"`multiple` is true.\");\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\");\n    }\n  }\n}\n/**\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\n\n\nfunction updateOptions(component, propValue) {\n  var selectedValue, i, l;\n  var options = component.getDOMNode().options;\n\n  if (component.props.multiple) {\n    selectedValue = {};\n\n    for (i = 0, l = propValue.length; i < l; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n\n    for (i = 0, l = options.length; i < l; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n\n    for (i = 0, l = options.length; i < l; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\n\nvar ReactDOMSelect = ReactClass.createClass({\n  displayName: 'ReactDOMSelect',\n  tagName: 'SELECT',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.onChange = this._handleChange;\n    props.value = null;\n    return select(props, this.props.children);\n  },\n  componentWillMount: function () {\n    this._pendingUpdate = false;\n  },\n  componentDidMount: function () {\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      updateOptions(this, value);\n    } else if (this.props.defaultValue != null) {\n      updateOptions(this, this.props.defaultValue);\n    }\n  },\n  componentDidUpdate: function (prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      this._pendingUpdate = false;\n      updateOptions(this, value);\n    } else if (!prevProps.multiple !== !this.props.multiple) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (this.props.defaultValue != null) {\n        updateOptions(this, this.props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(this, this.props.multiple ? [] : '');\n      }\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    this._pendingUpdate = true;\n    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMSelect;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactDOMSelect.js"],"names":["AutoFocusMixin","require","LinkedValueUtils","ReactBrowserComponentMixin","ReactClass","ReactElement","ReactUpdates","assign","select","createFactory","updateOptionsIfPendingUpdateAndMounted","_pendingUpdate","value","getValue","isMounted","updateOptions","selectValueType","props","propName","componentName","multiple","Array","isArray","Error","component","propValue","selectedValue","i","l","options","getDOMNode","length","selected","hasOwnProperty","ReactDOMSelect","createClass","displayName","tagName","mixins","Mixin","propTypes","defaultValue","render","onChange","_handleChange","children","componentWillMount","componentDidMount","componentDidUpdate","prevProps","event","returnValue","getOnChange","call","asap","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar select = ReactElement.createFactory('select');\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  /*jshint validthis:true */\n  if (this._pendingUpdate) {\n    this._pendingUpdate = false;\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null && this.isMounted()) {\n      updateOptions(this, value);\n    }\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +\n        (\"`multiple` is true.\")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +\n        (\"value if `multiple` is false.\")\n      );\n    }\n  }\n}\n\n/**\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var selectedValue, i, l;\n  var options = component.getDOMNode().options;\n\n  if (component.props.multiple) {\n    selectedValue = {};\n    for (i = 0, l = propValue.length; i < l; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0, l = options.length; i < l; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0, l = options.length; i < l; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactClass.createClass({\n  displayName: 'ReactDOMSelect',\n  tagName: 'SELECT',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentWillMount: function() {\n    this._pendingUpdate = false;\n  },\n\n  componentDidMount: function() {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      updateOptions(this, value);\n    } else if (this.props.defaultValue != null) {\n      updateOptions(this, this.props.defaultValue);\n    }\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      this._pendingUpdate = false;\n      updateOptions(this, value);\n    } else if (!prevProps.multiple !== !this.props.multiple) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (this.props.defaultValue != null) {\n        updateOptions(this, this.props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(this, this.props.multiple ? [] : '');\n      }\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    this._pendingUpdate = true;\n    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n"]},"metadata":{},"sourceType":"script"}