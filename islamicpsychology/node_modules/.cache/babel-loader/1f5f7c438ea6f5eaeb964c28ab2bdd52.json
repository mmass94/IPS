{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [],\n  // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    })); // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var args = [], $__0 = 0, $__1 = arguments.length; $__0 < $__1; $__0++) args.push(arguments[$__0]);\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(args[0], fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && ( // TODO: receiveComponent()?\n      fnName === 'mountComponent' || fnName === 'updateComponent' || fnName === '_renderValidatedComponent')) {\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactDefaultPerf.js"],"names":["DOMProperty","require","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","roundFloat","val","Math","floor","addValue","obj","key","ReactDefaultPerf","_allMeasurements","_mountStack","_injected","start","injection","injectMeasure","measure","length","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","console","table","map","item","componentName","inclusive","exclusive","render","count","printInclusive","getInclusiveSummary","time","log","getTotalTime","toFixed","getMeasurementsSummaryMap","printWasted","printDOM","getDOMSummary","result","ID_ATTRIBUTE_NAME","id","type","JSON","stringify","args","_recordWrite","fnName","totalTime","writes","push","moduleName","func","$__0","$__1","arguments","rv","counts","displayNames","apply","mountID","getID","forEach","update","writeArgs","fromIndex","toIndex","textContent","markupIndex","markup","parentID","Array","prototype","slice","call","_currentElement","rootNodeID","_rootNodeID","isRender","isMount","mountStack","entry","subMountTime","pop","current","getName","owner","_owner","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  getMeasurementsSummaryMap: function(measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    return summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes =\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' ||\n          fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' ||\n          moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n        (// TODO: receiveComponent()?\n        (fnName === 'mountComponent' ||\n        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {\n\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ?\n            this._currentElement._owner.getName() :\n            '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n"]},"metadata":{},"sourceType":"script"}