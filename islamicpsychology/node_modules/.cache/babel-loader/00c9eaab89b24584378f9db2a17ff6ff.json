{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\n\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar ReactReconciler = require(\"./ReactReconciler\");\n\nvar ReactChildReconciler = require(\"./ReactChildReconciler\");\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\n\n\nvar updateDepth = 0;\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\n\nvar updateQueue = [];\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\n\nvar markupQueue = [];\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\n\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\n\n\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\n\n\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\n\n\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\n\n\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\n\n\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\n\n\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name]; // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        ReactChildReconciler.unmountChildren(prevChildren); // TODO: The setTextContent operation should be enough\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        } // Set new text content.\n\n\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildren, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        this._updateChildren(nextNestedChildren, transaction, context);\n\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildren, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = ReactChildReconciler.updateChildren(prevChildren, nextNestedChildren, transaction, context);\n      this._renderedChildren = nextChildren;\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var name; // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var lastIndex = 0;\n      var nextIndex = 0;\n\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n\n            this._unmountChildByName(prevChild, name);\n          } // The child must be instantiated before it's mounted.\n\n\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n\n        nextIndex++;\n      } // Remove children that are no longer present.\n\n\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function (child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactMultiChild.js"],"names":["ReactComponentEnvironment","require","ReactMultiChildUpdateTypes","ReactReconciler","ReactChildReconciler","updateDepth","updateQueue","markupQueue","enqueueMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","textContent","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueTextContent","TEXT_CONTENT","processQueue","length","processChildrenUpdates","clearQueue","ReactMultiChild","Mixin","mountChildren","nestedChildren","transaction","context","children","instantiateChildren","_renderedChildren","mountImages","index","name","hasOwnProperty","child","rootID","_rootNodeID","mountImage","mountComponent","_mountIndex","updateTextContent","nextContent","errorThrown","prevChildren","unmountChildren","_unmountChildByName","setTextContent","updateChildren","nextNestedChildren","_updateChildren","nextChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","_mountChildByNameAtIndex","renderedChildren","createChild","removeChild","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAAxC;;AAEA,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAAlC;AAEA;;;;;;;;;AAOA,IAAII,WAAW,GAAG,CAAlB;AAEA;;;;;;;;;AAQA,IAAIC,WAAW,GAAG,EAAlB;AAEA;;;;;;;AAMA,IAAIC,WAAW,GAAG,EAAlB;AAEA;;;;;;;;;AAQA,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;AAChD;AACAL,EAAAA,WAAW,CAACM,IAAZ,CAAiB;AACfH,IAAAA,QAAQ,EAAEA,QADK;AAEfI,IAAAA,UAAU,EAAE,IAFG;AAGfC,IAAAA,IAAI,EAAEZ,0BAA0B,CAACa,aAHlB;AAIfC,IAAAA,WAAW,EAAET,WAAW,CAACK,IAAZ,CAAiBF,MAAjB,IAA2B,CAJzB;AAKfO,IAAAA,WAAW,EAAE,IALE;AAMfC,IAAAA,SAAS,EAAE,IANI;AAOfP,IAAAA,OAAO,EAAEA;AAPM,GAAjB;AASD;AAED;;;;;;;;;;AAQA,SAASQ,WAAT,CAAqBV,QAArB,EAA+BS,SAA/B,EAA0CP,OAA1C,EAAmD;AACjD;AACAL,EAAAA,WAAW,CAACM,IAAZ,CAAiB;AACfH,IAAAA,QAAQ,EAAEA,QADK;AAEfI,IAAAA,UAAU,EAAE,IAFG;AAGfC,IAAAA,IAAI,EAAEZ,0BAA0B,CAACkB,aAHlB;AAIfJ,IAAAA,WAAW,EAAE,IAJE;AAKfC,IAAAA,WAAW,EAAE,IALE;AAMfC,IAAAA,SAAS,EAAEA,SANI;AAOfP,IAAAA,OAAO,EAAEA;AAPM,GAAjB;AASD;AAED;;;;;;;;;AAOA,SAASU,aAAT,CAAuBZ,QAAvB,EAAiCS,SAAjC,EAA4C;AAC1C;AACAZ,EAAAA,WAAW,CAACM,IAAZ,CAAiB;AACfH,IAAAA,QAAQ,EAAEA,QADK;AAEfI,IAAAA,UAAU,EAAE,IAFG;AAGfC,IAAAA,IAAI,EAAEZ,0BAA0B,CAACoB,WAHlB;AAIfN,IAAAA,WAAW,EAAE,IAJE;AAKfC,IAAAA,WAAW,EAAE,IALE;AAMfC,IAAAA,SAAS,EAAEA,SANI;AAOfP,IAAAA,OAAO,EAAE;AAPM,GAAjB;AASD;AAED;;;;;;;;;AAOA,SAASY,kBAAT,CAA4Bd,QAA5B,EAAsCQ,WAAtC,EAAmD;AACjD;AACAX,EAAAA,WAAW,CAACM,IAAZ,CAAiB;AACfH,IAAAA,QAAQ,EAAEA,QADK;AAEfI,IAAAA,UAAU,EAAE,IAFG;AAGfC,IAAAA,IAAI,EAAEZ,0BAA0B,CAACsB,YAHlB;AAIfR,IAAAA,WAAW,EAAE,IAJE;AAKfC,IAAAA,WAAW,EAAEA,WALE;AAMfC,IAAAA,SAAS,EAAE,IANI;AAOfP,IAAAA,OAAO,EAAE;AAPM,GAAjB;AASD;AAED;;;;;;;AAKA,SAASc,YAAT,GAAwB;AACtB,MAAInB,WAAW,CAACoB,MAAhB,EAAwB;AACtB1B,IAAAA,yBAAyB,CAAC2B,sBAA1B,CACErB,WADF,EAEEC,WAFF;AAIAqB,IAAAA,UAAU;AACX;AACF;AAED;;;;;;;AAKA,SAASA,UAAT,GAAsB;AACpBtB,EAAAA,WAAW,CAACoB,MAAZ,GAAqB,CAArB;AACAnB,EAAAA,WAAW,CAACmB,MAAZ,GAAqB,CAArB;AACD;AAED;;;;;;;;AAMA,IAAIG,eAAe,GAAG;AAEpB;;;;;;;AAOAC,EAAAA,KAAK,EAAE;AAEL;;;;;;;;AAQAC,IAAAA,aAAa,EAAE,UAASC,cAAT,EAAyBC,WAAzB,EAAsCC,OAAtC,EAA+C;AAC5D,UAAIC,QAAQ,GAAG/B,oBAAoB,CAACgC,mBAArB,CACbJ,cADa,EACGC,WADH,EACgBC,OADhB,CAAf;AAGA,WAAKG,iBAAL,GAAyBF,QAAzB;AACA,UAAIG,WAAW,GAAG,EAAlB;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAIC,IAAT,IAAiBL,QAAjB,EAA2B;AACzB,YAAIA,QAAQ,CAACM,cAAT,CAAwBD,IAAxB,CAAJ,EAAmC;AACjC,cAAIE,KAAK,GAAGP,QAAQ,CAACK,IAAD,CAApB,CADiC,CAEjC;;AACA,cAAIG,MAAM,GAAG,KAAKC,WAAL,GAAmBJ,IAAhC;AACA,cAAIK,UAAU,GAAG1C,eAAe,CAAC2C,cAAhB,CACfJ,KADe,EAEfC,MAFe,EAGfV,WAHe,EAIfC,OAJe,CAAjB;AAMAQ,UAAAA,KAAK,CAACK,WAAN,GAAoBR,KAApB;AACAD,UAAAA,WAAW,CAAC1B,IAAZ,CAAiBiC,UAAjB;AACAN,UAAAA,KAAK;AACN;AACF;;AACD,aAAOD,WAAP;AACD,KAlCI;;AAoCL;;;;;;AAMAU,IAAAA,iBAAiB,EAAE,UAASC,WAAT,EAAsB;AACvC5C,MAAAA,WAAW;AACX,UAAI6C,WAAW,GAAG,IAAlB;;AACA,UAAI;AACF,YAAIC,YAAY,GAAG,KAAKd,iBAAxB,CADE,CAEF;;AACAjC,QAAAA,oBAAoB,CAACgD,eAArB,CAAqCD,YAArC,EAHE,CAIF;;AACA,aAAK,IAAIX,IAAT,IAAiBW,YAAjB,EAA+B;AAC7B,cAAIA,YAAY,CAACV,cAAb,CAA4BD,IAA5B,CAAJ,EAAuC;AACrC,iBAAKa,mBAAL,CAAyBF,YAAY,CAACX,IAAD,CAArC,EAA6CA,IAA7C;AACD;AACF,SATC,CAUF;;;AACA,aAAKc,cAAL,CAAoBL,WAApB;AACAC,QAAAA,WAAW,GAAG,KAAd;AACD,OAbD,SAaU;AACR7C,QAAAA,WAAW;;AACX,YAAI,CAACA,WAAL,EAAkB;AAChB,cAAI6C,WAAJ,EAAiB;AACftB,YAAAA,UAAU;AACX,WAFD,MAEO;AACLH,YAAAA,YAAY;AACb;AACF;AACF;AACF,KApEI;;AAsEL;;;;;;;AAOA8B,IAAAA,cAAc,EAAE,UAASC,kBAAT,EAA6BvB,WAA7B,EAA0CC,OAA1C,EAAmD;AACjE7B,MAAAA,WAAW;AACX,UAAI6C,WAAW,GAAG,IAAlB;;AACA,UAAI;AACF,aAAKO,eAAL,CAAqBD,kBAArB,EAAyCvB,WAAzC,EAAsDC,OAAtD;;AACAgB,QAAAA,WAAW,GAAG,KAAd;AACD,OAHD,SAGU;AACR7C,QAAAA,WAAW;;AACX,YAAI,CAACA,WAAL,EAAkB;AAChB,cAAI6C,WAAJ,EAAiB;AACftB,YAAAA,UAAU;AACX,WAFD,MAEO;AACLH,YAAAA,YAAY;AACb;AACF;AAEF;AACF,KA9FI;;AAgGL;;;;;;;;;AASAgC,IAAAA,eAAe,EAAE,UAASD,kBAAT,EAA6BvB,WAA7B,EAA0CC,OAA1C,EAAmD;AAClE,UAAIiB,YAAY,GAAG,KAAKd,iBAAxB;AACA,UAAIqB,YAAY,GAAGtD,oBAAoB,CAACmD,cAArB,CACjBJ,YADiB,EACHK,kBADG,EACiBvB,WADjB,EAC8BC,OAD9B,CAAnB;AAGA,WAAKG,iBAAL,GAAyBqB,YAAzB;;AACA,UAAI,CAACA,YAAD,IAAiB,CAACP,YAAtB,EAAoC;AAClC;AACD;;AACD,UAAIX,IAAJ,CATkE,CAUlE;AACA;;AACA,UAAImB,SAAS,GAAG,CAAhB;AACA,UAAIC,SAAS,GAAG,CAAhB;;AACA,WAAKpB,IAAL,IAAakB,YAAb,EAA2B;AACzB,YAAI,CAACA,YAAY,CAACjB,cAAb,CAA4BD,IAA5B,CAAL,EAAwC;AACtC;AACD;;AACD,YAAIqB,SAAS,GAAGV,YAAY,IAAIA,YAAY,CAACX,IAAD,CAA5C;AACA,YAAIsB,SAAS,GAAGJ,YAAY,CAAClB,IAAD,CAA5B;;AACA,YAAIqB,SAAS,KAAKC,SAAlB,EAA6B;AAC3B,eAAKC,SAAL,CAAeF,SAAf,EAA0BD,SAA1B,EAAqCD,SAArC;AACAA,UAAAA,SAAS,GAAGK,IAAI,CAACC,GAAL,CAASJ,SAAS,CAACd,WAAnB,EAAgCY,SAAhC,CAAZ;AACAE,UAAAA,SAAS,CAACd,WAAV,GAAwBa,SAAxB;AACD,SAJD,MAIO;AACL,cAAIC,SAAJ,EAAe;AACb;AACAF,YAAAA,SAAS,GAAGK,IAAI,CAACC,GAAL,CAASJ,SAAS,CAACd,WAAnB,EAAgCY,SAAhC,CAAZ;;AACA,iBAAKN,mBAAL,CAAyBQ,SAAzB,EAAoCrB,IAApC;AACD,WALI,CAML;;;AACA,eAAK0B,wBAAL,CACEJ,SADF,EACatB,IADb,EACmBoB,SADnB,EAC8B3B,WAD9B,EAC2CC,OAD3C;AAGD;;AACD0B,QAAAA,SAAS;AACV,OApCiE,CAqClE;;;AACA,WAAKpB,IAAL,IAAaW,YAAb,EAA2B;AACzB,YAAIA,YAAY,CAACV,cAAb,CAA4BD,IAA5B,KACA,EAAEkB,YAAY,IAAIA,YAAY,CAACjB,cAAb,CAA4BD,IAA5B,CAAlB,CADJ,EAC0D;AACxD,eAAKa,mBAAL,CAAyBF,YAAY,CAACX,IAAD,CAArC,EAA6CA,IAA7C;AACD;AACF;AACF,KArJI;;AAuJL;;;;;;AAMAY,IAAAA,eAAe,EAAE,YAAW;AAC1B,UAAIe,gBAAgB,GAAG,KAAK9B,iBAA5B;AACAjC,MAAAA,oBAAoB,CAACgD,eAArB,CAAqCe,gBAArC;AACA,WAAK9B,iBAAL,GAAyB,IAAzB;AACD,KAjKI;;AAmKL;;;;;;;;AAQA0B,IAAAA,SAAS,EAAE,UAASrB,KAAT,EAAgB/B,OAAhB,EAAyBgD,SAAzB,EAAoC;AAC7C;AACA;AACA;AACA,UAAIjB,KAAK,CAACK,WAAN,GAAoBY,SAAxB,EAAmC;AACjCxC,QAAAA,WAAW,CAAC,KAAKyB,WAAN,EAAmBF,KAAK,CAACK,WAAzB,EAAsCpC,OAAtC,CAAX;AACD;AACF,KAlLI;;AAoLL;;;;;;;AAOAyD,IAAAA,WAAW,EAAE,UAAS1B,KAAT,EAAgBG,UAAhB,EAA4B;AACvCrC,MAAAA,aAAa,CAAC,KAAKoC,WAAN,EAAmBC,UAAnB,EAA+BH,KAAK,CAACK,WAArC,CAAb;AACD,KA7LI;;AA+LL;;;;;;AAMAsB,IAAAA,WAAW,EAAE,UAAS3B,KAAT,EAAgB;AAC3BrB,MAAAA,aAAa,CAAC,KAAKuB,WAAN,EAAmBF,KAAK,CAACK,WAAzB,CAAb;AACD,KAvMI;;AAyML;;;;;;AAMAO,IAAAA,cAAc,EAAE,UAASrC,WAAT,EAAsB;AACpCM,MAAAA,kBAAkB,CAAC,KAAKqB,WAAN,EAAmB3B,WAAnB,CAAlB;AACD,KAjNI;;AAmNL;;;;;;;;;;;AAWAiD,IAAAA,wBAAwB,EAAE,UACxBxB,KADwB,EAExBF,IAFwB,EAGxBD,KAHwB,EAIxBN,WAJwB,EAKxBC,OALwB,EAKf;AACT;AACA,UAAIS,MAAM,GAAG,KAAKC,WAAL,GAAmBJ,IAAhC;AACA,UAAIK,UAAU,GAAG1C,eAAe,CAAC2C,cAAhB,CACfJ,KADe,EAEfC,MAFe,EAGfV,WAHe,EAIfC,OAJe,CAAjB;AAMAQ,MAAAA,KAAK,CAACK,WAAN,GAAoBR,KAApB;AACA,WAAK6B,WAAL,CAAiB1B,KAAjB,EAAwBG,UAAxB;AACD,KA9OI;;AAgPL;;;;;;;;;AASAQ,IAAAA,mBAAmB,EAAE,UAASX,KAAT,EAAgBF,IAAhB,EAAsB;AACzC,WAAK6B,WAAL,CAAiB3B,KAAjB;AACAA,MAAAA,KAAK,CAACK,WAAN,GAAoB,IAApB;AACD;AA5PI;AATa,CAAtB;AA2QAuB,MAAM,CAACC,OAAP,GAAiB1C,eAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactChildReconciler = require(\"./ReactChildReconciler\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction, context) {\n      var children = ReactChildReconciler.instantiateChildren(\n        nestedChildren, transaction, context\n      );\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(\n            child,\n            rootID,\n            transaction,\n            context\n          );\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = ReactChildReconciler.updateChildren(\n        prevChildren, nextNestedChildren, transaction, context\n      );\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(\n            nextChild, name, nextIndex, transaction, context\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(\n      child,\n      name,\n      index,\n      transaction,\n      context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(\n        child,\n        rootID,\n        transaction,\n        context\n      );\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n"]},"metadata":{},"sourceType":"script"}