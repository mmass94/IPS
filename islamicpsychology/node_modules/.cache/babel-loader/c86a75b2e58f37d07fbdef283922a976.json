{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n/* jslint bitwise:true */\n'use strict';\n\nvar MOD = 65521; // This is a clean-room implementation of adler32 designed for detecting\n// if markup is not what we expect it to be. It does not need to be\n// cryptographically strong, only reasonably good at detecting if markup\n// generated on the server is different than that on the client.\n\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    a = (a + data.charCodeAt(i)) % MOD;\n    b = (b + a) % MOD;\n  }\n\n  return a | b << 16;\n}\n\nmodule.exports = adler32;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/adler32.js"],"names":["MOD","adler32","data","a","b","i","length","charCodeAt","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;AAEA;;AAEA,IAAIA,GAAG,GAAG,KAAV,C,CAEA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCF,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAGD,IAAI,CAACK,UAAL,CAAgBF,CAAhB,CAAL,IAA2BL,GAA/B;AACAI,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAGD,CAAL,IAAUH,GAAd;AACD;;AACD,SAAOG,CAAC,GAAIC,CAAC,IAAI,EAAjB;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBR,OAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n/* jslint bitwise:true */\n\n'use strict';\n\nvar MOD = 65521;\n\n// This is a clean-room implementation of adler32 designed for detecting\n// if markup is not what we expect it to be. It does not need to be\n// cryptographically strong, only reasonably good at detecting if markup\n// generated on the server is different than that on the client.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  for (var i = 0; i < data.length; i++) {\n    a = (a + data.charCodeAt(i)) % MOD;\n    b = (b + a) % MOD;\n  }\n  return a | (b << 16);\n}\n\nmodule.exports = adler32;\n"]},"metadata":{},"sourceType":"script"}