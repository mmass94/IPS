{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar isEventSupported = require(\"./isEventSupported\");\n\nvar isTextInputElement = require(\"./isTextInputElement\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onChange: null\n      }),\n      captured: keyOf({\n        onChangeCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n/**\n * For IE shims\n */\n\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n/**\n * SECTION: handle `change` event\n */\n\nfunction shouldUseChangeEvent(elem) {\n  return elem.nodeName === 'SELECT' || elem.nodeName === 'INPUT' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\n\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent);\n  EventPropagators.accumulateTwoPhaseDispatches(event); // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\n\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n/**\n * SECTION: handle `input` event\n */\n\n\nvar isInputEventSupported = false;\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\n\n\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\n\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\n\n\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  } // delete restores the original property definition\n\n\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\n\n\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n\n  var value = nativeEvent.srcElement.value;\n\n  if (value === activeElementValue) {\n    return;\n  }\n\n  activeElementValue = value;\n  manualDispatchChangeEvent(nativeEvent);\n}\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\n\n\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n} // For IE8 and IE9.\n\n\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n} // For IE8 and IE9.\n\n\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n/**\n * SECTION: handle `click` event\n */\n\n\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName === 'INPUT' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\n\n\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var getTargetIDFunc, handleEventFunc;\n\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent);\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n};\nmodule.exports = ChangeEventPlugin;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ChangeEventPlugin.js"],"names":["EventConstants","require","EventPluginHub","EventPropagators","ExecutionEnvironment","ReactUpdates","SyntheticEvent","isEventSupported","isTextInputElement","keyOf","topLevelTypes","eventTypes","change","phasedRegistrationNames","bubbled","onChange","captured","onChangeCapture","dependencies","topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange","activeElement","activeElementID","activeElementValue","activeElementValueProp","shouldUseChangeEvent","elem","nodeName","type","doesChangeEventBubble","canUseDOM","document","documentMode","manualDispatchChangeEvent","nativeEvent","event","getPooled","accumulateTwoPhaseDispatches","batchedUpdates","runEventInBatch","enqueueEvents","processEventQueue","startWatchingForChangeEventIE8","target","targetID","attachEvent","stopWatchingForChangeEventIE8","detachEvent","getTargetIDForChangeEvent","topLevelType","topLevelTarget","topLevelTargetID","handleEventsForChangeEventIE8","isInputEventSupported","newValueProp","get","call","set","val","startWatchingForValueChange","value","Object","getOwnPropertyDescriptor","constructor","prototype","defineProperty","handlePropertyChange","stopWatchingForValueChange","propertyName","srcElement","getTargetIDForInputEvent","handleEventsForInputEventIE","getTargetIDForInputEventIE","shouldUseClickEvent","getTargetIDForClickEvent","ChangeEventPlugin","extractEvents","getTargetIDFunc","handleEventFunc","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar isEventSupported = require(\"./isEventSupported\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onChange: null}),\n      captured: keyOf({onChangeCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topChange,\n      topLevelTypes.topClick,\n      topLevelTypes.topFocus,\n      topLevelTypes.topInput,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  return (\n    elem.nodeName === 'SELECT' ||\n    (elem.nodeName === 'INPUT' && elem.type === 'file')\n  );\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (\n    (!('documentMode' in document) || document.documentMode > 8)\n  );\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(\n    eventTypes.change,\n    activeElementID,\n    nativeEvent\n  );\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (\n    (!('documentMode' in document) || document.documentMode > 9)\n  );\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp =  {\n  get: function() {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function(val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(\n    target.constructor.prototype,\n    'value'\n  );\n\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange ||\n      topLevelType === topLevelTypes.topKeyUp ||\n      topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return (\n    elem.nodeName === 'INPUT' &&\n    (elem.type === 'checkbox' || elem.type === 'radio')\n  );\n}\n\nfunction getTargetIDForClickEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(\n          eventTypes.change,\n          targetID,\n          nativeEvent\n        );\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n"]},"metadata":{},"sourceType":"script"}