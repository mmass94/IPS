{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.isStandardName.hasOwnProperty(propName), 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName));\n      DOMProperty.isStandardName[propName] = true;\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n        DOMProperty.getAttributeName[propName] = attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] = lowerCased;\n      }\n\n      DOMProperty.getPropertyName[propName] = DOMPropertyNames.hasOwnProperty(propName) ? DOMPropertyNames[propName] : propName;\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] = null;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] = checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);\n      DOMProperty.mustUseProperty[propName] = checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);\n      DOMProperty.hasSideEffects[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);\n      DOMProperty.hasBooleanValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);\n      DOMProperty.hasNumericValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);\n      DOMProperty.hasPositiveNumericValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);\n      DOMProperty.hasOverloadedBooleanValue[propName] = checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName], 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName]);\n      \"production\" !== process.env.NODE_ENV ? invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName], 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName]);\n      \"production\" !== process.env.NODE_ENV ? invariant(!!DOMProperty.hasBooleanValue[propName] + !!DOMProperty.hasNumericValue[propName] + !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(!!DOMProperty.hasBooleanValue[propName] + !!DOMProperty.hasNumericValue[propName] + !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1);\n    }\n  }\n};\nvar defaultValueCache = {};\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\n\nvar DOMProperty = {\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n\n    return nodeDefaults[prop];\n  },\n  injection: DOMPropertyInjection\n};\nmodule.exports = DOMProperty;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/DOMProperty.js"],"names":["invariant","require","checkMask","value","bitmask","DOMPropertyInjection","MUST_USE_ATTRIBUTE","MUST_USE_PROPERTY","HAS_SIDE_EFFECTS","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","injectDOMPropertyConfig","domPropertyConfig","Properties","DOMAttributeNames","DOMPropertyNames","DOMMutationMethods","isCustomAttribute","DOMProperty","_isCustomAttributeFunctions","push","propName","process","env","NODE_ENV","isStandardName","hasOwnProperty","lowerCased","toLowerCase","getPossibleStandardName","attributeName","getAttributeName","getPropertyName","getMutationMethod","propConfig","mustUseAttribute","mustUseProperty","hasSideEffects","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","defaultValueCache","ID_ATTRIBUTE_NAME","i","length","isCustomAttributeFn","getDefaultValueForProperty","nodeName","prop","nodeDefaults","testElement","document","createElement","injection","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACjC,SAAO,CAACD,KAAK,GAAGC,OAAT,MAAsBA,OAA7B;AACD;;AAED,IAAIC,oBAAoB,GAAG;AACzB;;;;AAIAC,EAAAA,kBAAkB,EAAE,GALK;AAMzBC,EAAAA,iBAAiB,EAAE,GANM;AAOzBC,EAAAA,gBAAgB,EAAE,GAPO;AAQzBC,EAAAA,iBAAiB,EAAE,GARM;AASzBC,EAAAA,iBAAiB,EAAE,IATM;AAUzBC,EAAAA,0BAA0B,EAAE,OAAO,IAVV;AAWzBC,EAAAA,4BAA4B,EAAE,IAXL;;AAazB;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAC,EAAAA,uBAAuB,EAAE,UAASC,iBAAT,EAA4B;AACnD,QAAIC,UAAU,GAAGD,iBAAiB,CAACC,UAAlB,IAAgC,EAAjD;AACA,QAAIC,iBAAiB,GAAGF,iBAAiB,CAACE,iBAAlB,IAAuC,EAA/D;AACA,QAAIC,gBAAgB,GAAGH,iBAAiB,CAACG,gBAAlB,IAAsC,EAA7D;AACA,QAAIC,kBAAkB,GAAGJ,iBAAiB,CAACI,kBAAlB,IAAwC,EAAjE;;AAEA,QAAIJ,iBAAiB,CAACK,iBAAtB,EAAyC;AACvCC,MAAAA,WAAW,CAACC,2BAAZ,CAAwCC,IAAxC,CACER,iBAAiB,CAACK,iBADpB;AAGD;;AAED,SAAK,IAAII,QAAT,IAAqBR,UAArB,EAAiC;AAC9B,uBAAiBS,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwC1B,SAAS,CAChD,CAACoB,WAAW,CAACO,cAAZ,CAA2BC,cAA3B,CAA0CL,QAA1C,CAD+C,EAEhD,yEACA,kEADA,GAEA,8DAFA,GAGA,6DALgD,EAMhDA,QANgD,CAAjD,GAOGvB,SAAS,CAAC,CAACoB,WAAW,CAACO,cAAZ,CAA2BC,cAA3B,CAA0CL,QAA1C,CAAF,CAPb;AASAH,MAAAA,WAAW,CAACO,cAAZ,CAA2BJ,QAA3B,IAAuC,IAAvC;AAEA,UAAIM,UAAU,GAAGN,QAAQ,CAACO,WAAT,EAAjB;AACAV,MAAAA,WAAW,CAACW,uBAAZ,CAAoCF,UAApC,IAAkDN,QAAlD;;AAEA,UAAIP,iBAAiB,CAACY,cAAlB,CAAiCL,QAAjC,CAAJ,EAAgD;AAC9C,YAAIS,aAAa,GAAGhB,iBAAiB,CAACO,QAAD,CAArC;AACAH,QAAAA,WAAW,CAACW,uBAAZ,CAAoCC,aAApC,IAAqDT,QAArD;AACAH,QAAAA,WAAW,CAACa,gBAAZ,CAA6BV,QAA7B,IAAyCS,aAAzC;AACD,OAJD,MAIO;AACLZ,QAAAA,WAAW,CAACa,gBAAZ,CAA6BV,QAA7B,IAAyCM,UAAzC;AACD;;AAEDT,MAAAA,WAAW,CAACc,eAAZ,CAA4BX,QAA5B,IACEN,gBAAgB,CAACW,cAAjB,CAAgCL,QAAhC,IACEN,gBAAgB,CAACM,QAAD,CADlB,GAEEA,QAHJ;;AAKA,UAAIL,kBAAkB,CAACU,cAAnB,CAAkCL,QAAlC,CAAJ,EAAiD;AAC/CH,QAAAA,WAAW,CAACe,iBAAZ,CAA8BZ,QAA9B,IAA0CL,kBAAkB,CAACK,QAAD,CAA5D;AACD,OAFD,MAEO;AACLH,QAAAA,WAAW,CAACe,iBAAZ,CAA8BZ,QAA9B,IAA0C,IAA1C;AACD;;AAED,UAAIa,UAAU,GAAGrB,UAAU,CAACQ,QAAD,CAA3B;AACAH,MAAAA,WAAW,CAACiB,gBAAZ,CAA6Bd,QAA7B,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACC,kBAAlC,CADX;AAEAc,MAAAA,WAAW,CAACkB,eAAZ,CAA4Bf,QAA5B,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACE,iBAAlC,CADX;AAEAa,MAAAA,WAAW,CAACmB,cAAZ,CAA2BhB,QAA3B,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACG,gBAAlC,CADX;AAEAY,MAAAA,WAAW,CAACoB,eAAZ,CAA4BjB,QAA5B,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACI,iBAAlC,CADX;AAEAW,MAAAA,WAAW,CAACqB,eAAZ,CAA4BlB,QAA5B,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACK,iBAAlC,CADX;AAEAU,MAAAA,WAAW,CAACsB,uBAAZ,CAAoCnB,QAApC,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACM,0BAAlC,CADX;AAEAS,MAAAA,WAAW,CAACuB,yBAAZ,CAAsCpB,QAAtC,IACErB,SAAS,CAACkC,UAAD,EAAa/B,oBAAoB,CAACO,4BAAlC,CADX;AAGC,uBAAiBY,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwC1B,SAAS,CAChD,CAACoB,WAAW,CAACiB,gBAAZ,CAA6Bd,QAA7B,CAAD,IACE,CAACH,WAAW,CAACkB,eAAZ,CAA4Bf,QAA5B,CAF6C,EAGhD,mEAHgD,EAIhDA,QAJgD,CAAjD,GAKGvB,SAAS,CAAC,CAACoB,WAAW,CAACiB,gBAAZ,CAA6Bd,QAA7B,CAAD,IACZ,CAACH,WAAW,CAACkB,eAAZ,CAA4Bf,QAA5B,CADU,CALb;AAOC,uBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwC1B,SAAS,CAChDoB,WAAW,CAACkB,eAAZ,CAA4Bf,QAA5B,KACE,CAACH,WAAW,CAACmB,cAAZ,CAA2BhB,QAA3B,CAF6C,EAGhD,sEAHgD,EAIhDA,QAJgD,CAAjD,GAKGvB,SAAS,CAACoB,WAAW,CAACkB,eAAZ,CAA4Bf,QAA5B,KACZ,CAACH,WAAW,CAACmB,cAAZ,CAA2BhB,QAA3B,CADU,CALb;AAOC,uBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwC1B,SAAS,CAChD,CAAC,CAACoB,WAAW,CAACoB,eAAZ,CAA4BjB,QAA5B,CAAF,GACE,CAAC,CAACH,WAAW,CAACqB,eAAZ,CAA4BlB,QAA5B,CADJ,GAEE,CAAC,CAACH,WAAW,CAACuB,yBAAZ,CAAsCpB,QAAtC,CAFJ,IAEuD,CAHP,EAIhD,sEACA,0CALgD,EAMhDA,QANgD,CAAjD,GAOGvB,SAAS,CAAC,CAAC,CAACoB,WAAW,CAACoB,eAAZ,CAA4BjB,QAA5B,CAAF,GACZ,CAAC,CAACH,WAAW,CAACqB,eAAZ,CAA4BlB,QAA5B,CADU,GAEZ,CAAC,CAACH,WAAW,CAACuB,yBAAZ,CAAsCpB,QAAtC,CAFU,IAEyC,CAF1C,CAPb;AAUD;AACF;AA7HwB,CAA3B;AA+HA,IAAIqB,iBAAiB,GAAG,EAAxB;AAEA;;;;;;;;;;;;;;AAaA,IAAIxB,WAAW,GAAG;AAEhByB,EAAAA,iBAAiB,EAAE,cAFH;;AAIhB;;;;AAIAlB,EAAAA,cAAc,EAAE,EARA;;AAUhB;;;;;AAKAI,EAAAA,uBAAuB,EAAE,EAfT;;AAiBhB;;;;;AAKAE,EAAAA,gBAAgB,EAAE,EAtBF;;AAwBhB;;;;;AAKAC,EAAAA,eAAe,EAAE,EA7BD;;AA+BhB;;;;;AAKAC,EAAAA,iBAAiB,EAAE,EApCH;;AAsChB;;;;AAIAE,EAAAA,gBAAgB,EAAE,EA1CF;;AA4ChB;;;;;AAKAC,EAAAA,eAAe,EAAE,EAjDD;;AAmDhB;;;;;;AAMAC,EAAAA,cAAc,EAAE,EAzDA;;AA2DhB;;;;AAIAC,EAAAA,eAAe,EAAE,EA/DD;;AAiEhB;;;;;AAKAC,EAAAA,eAAe,EAAE,EAtED;;AAwEhB;;;;;AAKAC,EAAAA,uBAAuB,EAAE,EA7ET;;AA+EhB;;;;;;AAMAC,EAAAA,yBAAyB,EAAE,EArFX;;AAuFhB;;;AAGAtB,EAAAA,2BAA2B,EAAE,EA1Fb;;AA4FhB;;;;AAIAF,EAAAA,iBAAiB,EAAE,UAASa,aAAT,EAAwB;AACzC,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,WAAW,CAACC,2BAAZ,CAAwC0B,MAA5D,EAAoED,CAAC,EAArE,EAAyE;AACvE,UAAIE,mBAAmB,GAAG5B,WAAW,CAACC,2BAAZ,CAAwCyB,CAAxC,CAA1B;;AACA,UAAIE,mBAAmB,CAAChB,aAAD,CAAvB,EAAwC;AACtC,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAxGe;;AA0GhB;;;;;;;;AAQAiB,EAAAA,0BAA0B,EAAE,UAASC,QAAT,EAAmBC,IAAnB,EAAyB;AACnD,QAAIC,YAAY,GAAGR,iBAAiB,CAACM,QAAD,CAApC;AACA,QAAIG,WAAJ;;AACA,QAAI,CAACD,YAAL,EAAmB;AACjBR,MAAAA,iBAAiB,CAACM,QAAD,CAAjB,GAA8BE,YAAY,GAAG,EAA7C;AACD;;AACD,QAAI,EAAED,IAAI,IAAIC,YAAV,CAAJ,EAA6B;AAC3BC,MAAAA,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuBL,QAAvB,CAAd;AACAE,MAAAA,YAAY,CAACD,IAAD,CAAZ,GAAqBE,WAAW,CAACF,IAAD,CAAhC;AACD;;AACD,WAAOC,YAAY,CAACD,IAAD,CAAnB;AACD,GA7He;AA+HhBK,EAAAA,SAAS,EAAEnD;AA/HK,CAAlB;AAkIAoD,MAAM,CAACC,OAAP,GAAiBtC,WAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function(domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(\n        domPropertyConfig.isCustomAttribute\n      );\n    }\n\n    for (var propName in Properties) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.isStandardName.hasOwnProperty(propName),\n        'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' +\n        '\\'%s\\' which has already been injected. You may be accidentally ' +\n        'injecting the same DOM property config twice, or you may be ' +\n        'injecting two configs that have conflicting property names.',\n        propName\n      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));\n\n      DOMProperty.isStandardName[propName] = true;\n\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n        DOMProperty.getAttributeName[propName] = attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] = lowerCased;\n      }\n\n      DOMProperty.getPropertyName[propName] =\n        DOMPropertyNames.hasOwnProperty(propName) ?\n          DOMPropertyNames[propName] :\n          propName;\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] = null;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);\n      DOMProperty.mustUseProperty[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);\n      DOMProperty.hasSideEffects[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);\n      DOMProperty.hasBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);\n      DOMProperty.hasNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);\n      DOMProperty.hasPositiveNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);\n      DOMProperty.hasOverloadedBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);\n\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.mustUseAttribute[propName] ||\n          !DOMProperty.mustUseProperty[propName],\n        'DOMProperty: Cannot require using both attribute and property: %s',\n        propName\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||\n        !DOMProperty.mustUseProperty[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        DOMProperty.mustUseProperty[propName] ||\n          !DOMProperty.hasSideEffects[propName],\n        'DOMProperty: Properties that have side effects must use property: %s',\n        propName\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||\n        !DOMProperty.hasSideEffects[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !!DOMProperty.hasBooleanValue[propName] +\n          !!DOMProperty.hasNumericValue[propName] +\n          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,\n        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +\n        'numeric value, but not a combination: %s',\n        propName\n      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +\n        !!DOMProperty.hasNumericValue[propName] +\n        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function(attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function(nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n"]},"metadata":{},"sourceType":"script"}