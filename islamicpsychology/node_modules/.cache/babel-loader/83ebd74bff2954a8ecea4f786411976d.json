{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\n\nvar ReactContext = require(\"./ReactContext\");\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactElementValidator = require(\"./ReactElementValidator\");\n\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\n\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\n\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\n\nvar ReactReconciler = require(\"./ReactReconciler\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar emptyObject = require(\"./emptyObject\");\n\nvar invariant = require(\"./invariant\");\n\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\nvar warning = require(\"./warning\");\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n\n  if (owner) {\n    var name = owner.getName();\n\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\n\n\nvar nextMountID = 1;\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\n\nvar ReactCompositeComponentMixin = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null; // See ReactUpdateQueue\n\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._renderedComponent = null;\n    this._context = null;\n    this._mountOrder = 0;\n    this._isTopLevel = false; // See ReactUpdates and ReactUpdateQueue.\n\n    this._pendingCallbacks = null;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n\n    var publicProps = this._processProps(this._currentElement.props);\n\n    var publicContext = this._processContext(this._currentElement._context);\n\n    var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement); // Initialize the public class\n\n    var inst = new Component(publicProps, publicContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      \"production\" !== process.env.NODE_ENV ? warning(inst.render != null, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render` in your ' + 'component or you may have accidentally tried to render an element ' + 'whose type is a function that isn\\'t a React component.', Component.displayName || Component.name || 'Component') : null;\n    } // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n\n\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    this._instance = inst; // Store a reference from the instance back to the internal representation\n\n    ReactInstanceMap.set(inst, this);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      this._warnIfContextsDiffer(this._currentElement._context, context);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : null;\n      \"production\" !== process.env.NODE_ENV ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : null;\n    }\n\n    var initialState = inst.state;\n\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(typeof initialState === 'object' && !Array.isArray(initialState));\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    var childContext;\n    var renderedElement;\n    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;\n    ReactLifeCycle.currentlyMountingInstance = this;\n\n    try {\n      if (inst.componentWillMount) {\n        inst.componentWillMount(); // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingStateQueue` without triggering a re-render.\n\n        if (this._pendingStateQueue) {\n          inst.state = this._processPendingState(inst.props, inst.context);\n        }\n      }\n\n      childContext = this._getValidatedChildContext(context);\n      renderedElement = this._renderValidatedComponent(childContext);\n    } finally {\n      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;\n    }\n\n    this._renderedComponent = this._instantiateReactComponent(renderedElement, this._currentElement.type // The wrapping type\n    );\n    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._mergeChildContext(context, childContext));\n\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount) {\n      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;\n      ReactLifeCycle.currentlyUnmountingInstance = this;\n\n      try {\n        inst.componentWillUnmount();\n      } finally {\n        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;\n      }\n    }\n\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null; // Reset pending fields\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null; // These fields do not really need to be reset since this object is no\n    // longer accessible.\n\n    this._context = null;\n    this._rootNodeID = null; // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n\n    ReactInstanceMap.remove(inst); // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Schedule a partial update to the props. Only used for internal testing.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @internal\n   */\n  _setPropsInternal: function (partialProps, callback) {\n    // This is a deoptimized path. We optimize for always having an element.\n    // This creates an extra internal element.\n    var element = this._pendingElement || this._currentElement;\n    this._pendingElement = ReactElement.cloneAndReplaceProps(element, assign({}, element.props, partialProps));\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var maskedContext = null; // This really should be getting the component class for the element,\n    // but we know that we're not going to need it for built-ins.\n\n    if (typeof this._currentElement.type === 'string') {\n      return emptyObject;\n    }\n\n    var contextTypes = this._currentElement.type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyObject;\n    }\n\n    maskedContext = {};\n\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement);\n\n      if (Component.contextTypes) {\n        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _getValidatedChildContext: function (currentContext) {\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n\n    if (childContext) {\n      \"production\" !== process.env.NODE_ENV ? invariant(typeof inst.constructor.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(typeof inst.constructor.childContextTypes === 'object');\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(inst.constructor.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n\n      for (var name in childContext) {\n        \"production\" !== process.env.NODE_ENV ? invariant(name in inst.constructor.childContextTypes, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(name in inst.constructor.childContextTypes);\n      }\n\n      return childContext;\n    }\n\n    return null;\n  },\n  _mergeChildContext: function (currentContext, childContext) {\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function (newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(this._currentElement);\n\n      if (Component.propTypes) {\n        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function (propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          \"production\" !== process.env.NODE_ENV ? invariant(typeof propTypes[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(typeof propTypes[propName] === 'function');\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // React.render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            \"production\" !== process.env.NODE_ENV ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : null;\n          } else {\n            \"production\" !== process.env.NODE_ENV ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : null;\n          }\n        }\n      }\n    }\n  },\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n    this._pendingElement = null;\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);\n    }\n\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        ReactElementValidator.checkAndWarnForMutatedProps(this._currentElement);\n      }\n\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    }\n  },\n\n  /**\n   * Compare two contexts, warning if they are different\n   * TODO: Remove this check when owner-context is removed\n   */\n  _warnIfContextsDiffer: function (ownerBasedContext, parentBasedContext) {\n    ownerBasedContext = this._maskContext(ownerBasedContext);\n    parentBasedContext = this._maskContext(parentBasedContext);\n    var parentKeys = Object.keys(parentBasedContext).sort();\n    var displayName = this.getName() || 'ReactCompositeComponent';\n\n    for (var i = 0; i < parentKeys.length; i++) {\n      var key = parentKeys[i];\n      \"production\" !== process.env.NODE_ENV ? warning(ownerBasedContext[key] === parentBasedContext[key], 'owner-based and parent-based contexts differ ' + '(values: `%s` vs `%s`) for key (%s) while mounting %s ' + '(see: http://fb.me/react-context-by-parent)', ownerBasedContext[key], parentBasedContext[key], key, displayName) : null;\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n    var nextContext = inst.context;\n    var nextProps = inst.props; // Distinguish between a props update versus a simple state update\n\n    if (prevParentElement !== nextParentElement) {\n      nextContext = this._processContext(nextParentElement._context);\n      nextProps = this._processProps(nextParentElement.props);\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (nextUnmaskedContext != null) {\n          this._warnIfContextsDiffer(nextParentElement._context, nextUnmaskedContext);\n        }\n      } // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : null;\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false; // Will set `this.props`, `this.state` and `this.context`.\n\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var inst = this._instance;\n    var prevProps = inst.props;\n    var prevState = inst.state;\n    var prevContext = inst.context;\n\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (inst.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n\n    var childContext = this._getValidatedChildContext();\n\n    var nextRenderedElement = this._renderValidatedComponent(childContext);\n\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._mergeChildContext(context, childContext));\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement, this._currentElement.type);\n      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._mergeChildContext(context, childContext));\n\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function (childContext) {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._mergeChildContext(this._currentElement._context, childContext);\n    ReactCurrentOwner.current = this;\n\n    try {\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant( // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent), '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant( // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent));\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = component.getPublicInstance();\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by React.render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    return this._instance;\n  },\n  // Stub\n  _instantiateReactComponent: null\n};\nReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent',\n  _renderValidatedComponent: '_renderValidatedComponent'\n});\nvar ReactCompositeComponent = {\n  Mixin: ReactCompositeComponentMixin\n};\nmodule.exports = ReactCompositeComponent;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactCompositeComponent.js"],"names":["ReactComponentEnvironment","require","ReactContext","ReactCurrentOwner","ReactElement","ReactElementValidator","ReactInstanceMap","ReactLifeCycle","ReactNativeComponent","ReactPerf","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactReconciler","ReactUpdates","assign","emptyObject","invariant","shouldUpdateReactComponent","warning","getDeclarationErrorAddendum","component","owner","_currentElement","_owner","name","getName","nextMountID","ReactCompositeComponentMixin","construct","element","_rootNodeID","_instance","_pendingElement","_pendingStateQueue","_pendingReplaceState","_pendingForceUpdate","_renderedComponent","_context","_mountOrder","_isTopLevel","_pendingCallbacks","mountComponent","rootID","transaction","context","publicProps","_processProps","props","publicContext","_processContext","Component","getComponentClassForElement","inst","process","env","NODE_ENV","render","displayName","refs","set","_warnIfContextsDiffer","getInitialState","isReactClassApproved","getDefaultProps","propTypes","contextTypes","componentShouldUpdate","initialState","state","undefined","Array","isArray","childContext","renderedElement","previouslyMounting","currentlyMountingInstance","componentWillMount","_processPendingState","_getValidatedChildContext","_renderValidatedComponent","_instantiateReactComponent","type","markup","_mergeChildContext","componentDidMount","getReactMountReady","enqueue","unmountComponent","componentWillUnmount","previouslyUnmounting","currentlyUnmountingInstance","remove","_setPropsInternal","partialProps","callback","cloneAndReplaceProps","enqueueUpdate","_maskContext","maskedContext","contextName","_checkPropTypes","currentContext","getChildContext","constructor","childContextTypes","newProps","prop","location","componentName","propName","hasOwnProperty","error","ex","Error","addendum","message","receiveComponent","nextElement","nextContext","prevElement","prevContext","updateComponent","performUpdateIfNecessary","checkAndWarnForMutatedProps","ownerBasedContext","parentBasedContext","parentKeys","Object","keys","sort","i","length","key","prevParentElement","nextParentElement","prevUnmaskedContext","nextUnmaskedContext","nextProps","componentWillReceiveProps","nextState","shouldUpdate","shouldComponentUpdate","_performComponentUpdate","queue","replace","partial","call","unmaskedContext","prevProps","prevState","componentWillUpdate","_updateRenderedComponent","componentDidUpdate","bind","prevComponentInstance","prevRenderedElement","nextRenderedElement","thisID","prevComponentID","nextMarkup","_replaceNodeWithMarkupByID","replaceNodeWithMarkupByID","_renderValidatedComponentWithoutOwnerOrContext","renderedComponent","_isMockFunction","previousContext","current","isValidElement","attachRef","ref","getPublicInstance","detachRef","measureMethods","ReactCompositeComponent","Mixin","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\nvar invariant = require(\"./invariant\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function(element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n\n    // See ReactUpdateQueue\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedComponent = null;\n\n    this._context = null;\n    this._mountOrder = 0;\n    this._isTopLevel = false;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n\n    var publicProps = this._processProps(this._currentElement.props);\n    var publicContext = this._processContext(this._currentElement._context);\n\n    var Component = ReactNativeComponent.getComponentClassForElement(\n      this._currentElement\n    );\n\n    // Initialize the public class\n    var inst = new Component(publicProps, publicContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        inst.render != null,\n        '%s(...): No `render` method found on the returned component ' +\n        'instance: you may have forgotten to define `render` in your ' +\n        'component or you may have accidentally tried to render an element ' +\n        'whose type is a function that isn\\'t a React component.',\n        Component.displayName || Component.name || 'Component'\n      ) : null);\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      this._warnIfContextsDiffer(this._currentElement._context, context);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.getInitialState ||\n        inst.getInitialState.isReactClassApproved,\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n        'This is only supported for classes created using React.createClass. ' +\n        'Did you mean to define a state property instead?',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.getDefaultProps ||\n        inst.getDefaultProps.isReactClassApproved,\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n        'This is only supported for classes created using React.createClass. ' +\n        'Use a static property to define defaultProps instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.propTypes,\n        'propTypes was defined as an instance property on %s. Use a static ' +\n        'property to define propTypes instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.contextTypes,\n        'contextTypes was defined as an instance property on %s. Use a ' +\n        'static property to define contextTypes instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof inst.componentShouldUpdate !== 'function',\n        '%s has a method called ' +\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n        'The name is phrased as a question because the function is ' +\n        'expected to return a value.',\n        (this.getName() || 'A component')\n      ) : null);\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof initialState === 'object' && !Array.isArray(initialState),\n      '%s.state: must be set to an object or null',\n      this.getName() || 'ReactCompositeComponent'\n    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    var childContext;\n    var renderedElement;\n\n    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;\n    ReactLifeCycle.currentlyMountingInstance = this;\n    try {\n      if (inst.componentWillMount) {\n        inst.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingStateQueue` without triggering a re-render.\n        if (this._pendingStateQueue) {\n          inst.state = this._processPendingState(inst.props, inst.context);\n        }\n      }\n\n      childContext = this._getValidatedChildContext(context);\n      renderedElement = this._renderValidatedComponent(childContext);\n    } finally {\n      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;\n    }\n\n    this._renderedComponent = this._instantiateReactComponent(\n      renderedElement,\n      this._currentElement.type // The wrapping type\n    );\n\n    var markup = ReactReconciler.mountComponent(\n      this._renderedComponent,\n      rootID,\n      transaction,\n      this._mergeChildContext(context, childContext)\n    );\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount) {\n      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;\n      ReactLifeCycle.currentlyUnmountingInstance = this;\n      try {\n        inst.componentWillUnmount();\n      } finally {\n        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;\n      }\n    }\n\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null;\n\n    // Reset pending fields\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Schedule a partial update to the props. Only used for internal testing.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @internal\n   */\n  _setPropsInternal: function(partialProps, callback) {\n    // This is a deoptimized path. We optimize for always having an element.\n    // This creates an extra internal element.\n    var element = this._pendingElement || this._currentElement;\n    this._pendingElement = ReactElement.cloneAndReplaceProps(\n      element,\n      assign({}, element.props, partialProps)\n    );\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function(context) {\n    var maskedContext = null;\n    // This really should be getting the component class for the element,\n    // but we know that we're not going to need it for built-ins.\n    if (typeof this._currentElement.type === 'string') {\n      return emptyObject;\n    }\n    var contextTypes = this._currentElement.type.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext = this._maskContext(context);\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(\n        this._currentElement\n      );\n      if (Component.contextTypes) {\n        this._checkPropTypes(\n          Component.contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _getValidatedChildContext: function(currentContext) {\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n    if (childContext) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof inst.constructor.childContextTypes === 'object',\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n        'use getChildContext().',\n        this.getName() || 'ReactCompositeComponent'\n      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          inst.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          name in inst.constructor.childContextTypes,\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n          this.getName() || 'ReactCompositeComponent',\n          name\n        ) : invariant(name in inst.constructor.childContextTypes));\n      }\n      return childContext;\n    }\n    return null;\n  },\n\n  _mergeChildContext: function(currentContext, childContext) {\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(\n        this._currentElement\n      );\n      if (Component.propTypes) {\n        this._checkPropTypes(\n          Component.propTypes,\n          newProps,\n          ReactPropTypeLocations.prop\n        );\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            typeof propTypes[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually ' +\n            'from React.PropTypes.',\n            componentName || 'React class',\n            ReactPropTypeLocationNames[location],\n            propName\n          ) : invariant(typeof propTypes[propName] === 'function'));\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // React.render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'Failed Composite propType: %s%s',\n              error.message,\n              addendum\n            ) : null);\n          } else {\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'Failed Context Types: %s%s',\n              error.message,\n              addendum\n            ) : null);\n          }\n        }\n      }\n    }\n  },\n\n  receiveComponent: function(nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(\n      transaction,\n      prevElement,\n      nextElement,\n      prevContext,\n      nextContext\n    );\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(\n        this,\n        this._pendingElement || this._currentElement,\n        transaction,\n        this._context\n      );\n    }\n\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        ReactElementValidator.checkAndWarnForMutatedProps(\n          this._currentElement\n        );\n      }\n\n      this.updateComponent(\n        transaction,\n        this._currentElement,\n        this._currentElement,\n        this._context,\n        this._context\n      );\n    }\n  },\n\n  /**\n   * Compare two contexts, warning if they are different\n   * TODO: Remove this check when owner-context is removed\n   */\n   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {\n    ownerBasedContext = this._maskContext(ownerBasedContext);\n    parentBasedContext = this._maskContext(parentBasedContext);\n    var parentKeys = Object.keys(parentBasedContext).sort();\n    var displayName = this.getName() || 'ReactCompositeComponent';\n    for (var i = 0; i < parentKeys.length; i++) {\n      var key = parentKeys[i];\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        ownerBasedContext[key] === parentBasedContext[key],\n        'owner-based and parent-based contexts differ '  +\n        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +\n        '(see: http://fb.me/react-context-by-parent)',\n        ownerBasedContext[key],\n        parentBasedContext[key],\n        key,\n        displayName\n      ) : null);\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function(\n    transaction,\n    prevParentElement,\n    nextParentElement,\n    prevUnmaskedContext,\n    nextUnmaskedContext\n  ) {\n    var inst = this._instance;\n\n    var nextContext = inst.context;\n    var nextProps = inst.props;\n\n    // Distinguish between a props update versus a simple state update\n    if (prevParentElement !== nextParentElement) {\n      nextContext = this._processContext(nextParentElement._context);\n      nextProps = this._processProps(nextParentElement.props);\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (nextUnmaskedContext != null) {\n          this._warnIfContextsDiffer(\n            nextParentElement._context,\n            nextUnmaskedContext\n          );\n        }\n      }\n\n      // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate =\n      this._pendingForceUpdate ||\n      !inst.shouldComponentUpdate ||\n      inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof shouldUpdate !== 'undefined',\n        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n        'boolean value. Make sure to return true or false.',\n        this.getName() || 'ReactCompositeComponent'\n      ) : null);\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(\n        nextParentElement,\n        nextProps,\n        nextState,\n        nextContext,\n        transaction,\n        nextUnmaskedContext\n      );\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function(props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(\n        nextState,\n        typeof partial === 'function' ?\n          partial.call(inst, nextState, props, context) :\n          partial\n      );\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextElement,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction,\n    unmaskedContext\n  ) {\n    var inst = this._instance;\n\n    var prevProps = inst.props;\n    var prevState = inst.state;\n    var prevContext = inst.context;\n\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (inst.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),\n        inst\n      );\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function(transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var childContext = this._getValidatedChildContext();\n    var nextRenderedElement = this._renderValidatedComponent(childContext);\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(\n        prevComponentInstance,\n        nextRenderedElement,\n        transaction,\n        this._mergeChildContext(context, childContext)\n      );\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n\n      this._renderedComponent = this._instantiateReactComponent(\n        nextRenderedElement,\n        this._currentElement.type\n      );\n      var nextMarkup = ReactReconciler.mountComponent(\n        this._renderedComponent,\n        thisID,\n        transaction,\n        this._mergeChildContext(context, childContext)\n      );\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(\n      prevComponentID,\n      nextMarkup\n    );\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function() {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n    if (\"production\" !== process.env.NODE_ENV) {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' &&\n          inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function(childContext) {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._mergeChildContext(\n      this._currentElement._context,\n      childContext\n    );\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent =\n        this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      // TODO: An `isValidNode` function would probably be more appropriate\n      renderedComponent === null || renderedComponent === false ||\n      ReactElement.isValidElement(renderedComponent),\n      '%s.render(): A valid ReactComponent must be returned. You may have ' +\n        'returned undefined, an array or some other invalid object.',\n      this.getName() || 'ReactCompositeComponent'\n    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false ||\n    ReactElement.isValidElement(renderedComponent)));\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function(ref, component) {\n    var inst = this.getPublicInstance();\n    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;\n    refs[ref] = component.getPublicInstance();\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function(ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function() {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return (\n      type.displayName || (constructor && constructor.displayName) ||\n      type.name || (constructor && constructor.name) ||\n      null\n    );\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by React.render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function() {\n    return this._instance;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n\n};\n\nReactPerf.measureMethods(\n  ReactCompositeComponentMixin,\n  'ReactCompositeComponent',\n  {\n    mountComponent: 'mountComponent',\n    updateComponent: 'updateComponent',\n    _renderValidatedComponent: '_renderValidatedComponent'\n  }\n);\n\nvar ReactCompositeComponent = {\n\n  Mixin: ReactCompositeComponentMixin\n\n};\n\nmodule.exports = ReactCompositeComponent;\n"]},"metadata":{},"sourceType":"script"}