{"ast":null,"code":"/** @format */\nimport axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_VIDEO, VIDEO_ERROR, VIDEO_ADDED } from \"./types\"; // Get current video\n\nexport const getCurrentVideo = () => async dispatch => {\n  try {\n    const res = await axios.get(\"http://localhost:5000/api/videos\");\n    dispatch({\n      type: GET_VIDEO,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: VIDEO_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //create or update a Video\n\nexport const addVideo = (formData, history, edit = false) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(\"http://localhost:5000/api/videos\", formData, config);\n    dispatch({\n      type: GET_VIDEO,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? \"Video Updated\" : \"Video Added\", \"success\"));\n\n    if (!edit) {\n      history.push(\"/dashboard\");\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: VIDEO_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Admin Register\n\n/*export const addVideo = (VideoLink, VideoTitle, VideoSummery) => async (\r\n  dispatch\r\n) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({ VideoLink, VideoTitle, VideoSummery });\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:5000/api/Videos\",\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: VIDEO_ADDED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n    dispatch({\r\n      type: VIDEO_ERROR,\r\n    });\r\n  }\r\n};*/","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/islamicpsychology/src/actions/Video.js"],"names":["axios","setAlert","GET_VIDEO","VIDEO_ERROR","VIDEO_ADDED","getCurrentVideo","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addVideo","formData","history","edit","config","headers","post","push","errors","forEach","error"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,SAApD,C,CAEA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACvD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,kCAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,SADC;AAEPQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,WADC;AAEPO,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAdM,C,CAgBP;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAAI,GAAG,KAA3B,KAAqC,OAC3Dd,QAD2D,KAExD;AACH,MAAI;AACF,UAAMe,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMf,GAAG,GAAG,MAAMP,KAAK,CAACuB,IAAN,CAChB,kCADgB,EAEhBL,QAFgB,EAGhBG,MAHgB,CAAlB;AAMAf,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,SADC;AAEPQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACL,QAAQ,CAACmB,IAAI,GAAG,eAAH,GAAqB,aAA1B,EAAyC,SAAzC,CAAT,CAAR;;AAEA,QAAI,CAACA,IAAL,EAAW;AACTD,MAAAA,OAAO,CAACK,IAAR,CAAa,YAAb;AACD;AACF,GAvBD,CAuBE,OAAOZ,GAAP,EAAY;AACZ,UAAMa,MAAM,GAAGb,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBc,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,OAAP,CAAgBC,KAAD,IAAWrB,QAAQ,CAACL,QAAQ,CAAC0B,KAAK,CAACd,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,WADC;AAEPO,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CArCM,C,CAuCP;;AAEA","sourcesContent":["/** @format */\r\n\r\nimport axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport { GET_VIDEO, VIDEO_ERROR, VIDEO_ADDED } from \"./types\";\r\n\r\n// Get current video\r\nexport const getCurrentVideo = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"http://localhost:5000/api/videos\");\r\n\r\n    dispatch({\r\n      type: GET_VIDEO,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: VIDEO_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n//create or update a Video\r\n\r\nexport const addVideo = (formData, history, edit = false) => async (\r\n  dispatch\r\n) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const res = await axios.post(\r\n      \"http://localhost:5000/api/videos\",\r\n      formData,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: GET_VIDEO,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(setAlert(edit ? \"Video Updated\" : \"Video Added\", \"success\"));\r\n\r\n    if (!edit) {\r\n      history.push(\"/dashboard\");\r\n    }\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n    dispatch({\r\n      type: VIDEO_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Admin Register\r\n\r\n/*export const addVideo = (VideoLink, VideoTitle, VideoSummery) => async (\r\n  dispatch\r\n) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({ VideoLink, VideoTitle, VideoSummery });\r\n  try {\r\n    const res = await axios.post(\r\n      \"http://localhost:5000/api/Videos\",\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: VIDEO_ADDED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n    dispatch({\r\n      type: VIDEO_ERROR,\r\n    });\r\n  }\r\n};*/\r\n"]},"metadata":{},"sourceType":"module"}