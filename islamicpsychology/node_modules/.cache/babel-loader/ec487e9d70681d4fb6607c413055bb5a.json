{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n'use strict';\n\nvar CallbackQueue = require(\"./CallbackQueue\");\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar ReactInputSelection = require(\"./ReactInputSelection\");\n\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");\n\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\n\n\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\n\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\n\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\nvar PUT_LISTENER_QUEUEING = {\n  initialize: function () {\n    this.putListenerQueue.reset();\n  },\n  close: function () {\n    this.putListenerQueue.putListeners();\n  }\n};\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\n\nvar TRANSACTION_WRAPPERS = [PUT_LISTENER_QUEUEING, SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\n\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction(); // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap proceedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n  getPutListenerQueue: function () {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue = null;\n  }\n};\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\nPooledClass.addPoolingTo(ReactReconcileTransaction);\nmodule.exports = ReactReconcileTransaction;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactReconcileTransaction.js"],"names":["CallbackQueue","require","PooledClass","ReactBrowserEventEmitter","ReactInputSelection","ReactPutListenerQueue","Transaction","assign","SELECTION_RESTORATION","initialize","getSelectionInformation","close","restoreSelection","EVENT_SUPPRESSION","currentlyEnabled","isEnabled","setEnabled","previouslyEnabled","ON_DOM_READY_QUEUEING","reactMountReady","reset","notifyAll","PUT_LISTENER_QUEUEING","putListenerQueue","putListeners","TRANSACTION_WRAPPERS","ReactReconcileTransaction","reinitializeTransaction","renderToStaticMarkup","getPooled","Mixin","getTransactionWrappers","getReactMountReady","getPutListenerQueue","destructor","release","prototype","addPoolingTo","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function() {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`\n   *   restores the previous value.\n   */\n  close: function(previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function() {\n    this.reactMountReady.notifyAll();\n  }\n};\n\nvar PUT_LISTENER_QUEUEING = {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: function() {\n    this.putListenerQueue.putListeners();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [\n  PUT_LISTENER_QUEUEING,\n  SELECTION_RESTORATION,\n  EVENT_SUPPRESSION,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap proceedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue = null;\n  }\n};\n\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;\n"]},"metadata":{},"sourceType":"script"}