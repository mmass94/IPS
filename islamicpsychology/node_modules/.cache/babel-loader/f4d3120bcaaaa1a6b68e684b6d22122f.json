{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n/**\n * Injectable ordering of event plugins.\n */\n\n\nvar EventPluginOrder = null;\n/**\n * Injectable mapping from names to event plugin modules.\n */\n\nvar namesToPlugins = {};\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\n\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    \"production\" !== process.env.NODE_ENV ? invariant(pluginIndex > -1, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(pluginIndex > -1);\n\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(PluginModule.extractEvents, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(PluginModule.extractEvents);\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n\n    for (var eventName in publishedEvents) {\n      \"production\" !== process.env.NODE_ENV ? invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName), 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName));\n    }\n  }\n}\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\n\n\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  \"production\" !== process.env.NODE_ENV ? invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\n\n\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  \"production\" !== process.env.NODE_ENV ? invariant(!EventPluginRegistry.registrationNameModules[registrationName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]);\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\n\n\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    \"production\" !== process.env.NODE_ENV ? invariant(!EventPluginOrder, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(!EventPluginOrder); // Clone the ordering so it cannot be dynamically mutated.\n\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n\n      var PluginModule = injectedNamesToPlugins[pluginName];\n\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        \"production\" !== process.env.NODE_ENV ? invariant(!namesToPlugins[pluginName], 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(!namesToPlugins[pluginName]);\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n\n    EventPluginRegistry.plugins.length = 0;\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n};\nmodule.exports = EventPluginRegistry;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/EventPluginRegistry.js"],"names":["invariant","require","EventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","PluginModule","pluginIndex","indexOf","process","env","NODE_ENV","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","injectEventPluginOrder","InjectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","phase","_resetEventPlugins","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n      'the plugin ordering, `%s`.',\n      pluginName\n    ) : invariant(pluginIndex > -1));\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      PluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n      'method, but `%s` does not.',\n      pluginName\n    ) : invariant(PluginModule.extractEvents));\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          PluginModule,\n          eventName\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName\n      ) : invariant(publishEventForPlugin(\n        publishedEvents[eventName],\n        PluginModule,\n        eventName\n      )));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'event name, `%s`.',\n    eventName\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          PluginModule,\n          eventName\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      PluginModule,\n      eventName\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'registration name, `%s`.',\n    registrationName\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] =\n    PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !EventPluginOrder,\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n      'once. You are likely trying to load more than one copy of React.'\n    ) : invariant(!EventPluginOrder));\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !== PluginModule) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !namesToPlugins[pluginName],\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n          'using the same name, `%s`.',\n          pluginName\n        ) : invariant(!namesToPlugins[pluginName]));\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function(event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[\n        dispatchConfig.registrationName\n      ] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[\n        dispatchConfig.phasedRegistrationNames[phase]\n      ];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function() {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;\n"]},"metadata":{},"sourceType":"script"}