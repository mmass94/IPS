{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createFullPageComponent\n * @typechecks\n */\n'use strict'; // Defeat circular references by requiring this directly.\n\nvar ReactClass = require(\"./ReactClass\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n/**\n * Create a component that will throw an exception when unmounted.\n *\n * Components like <html> <head> and <body> can't be removed or added\n * easily in a cross-browser way, however it's valuable to be able to\n * take advantage of React's reconciliation for styling and <title>\n * management. So we just document it and throw in dangerous cases.\n *\n * @param {string} tag The tag to wrap\n * @return {function} convenience constructor of new component\n */\n\n\nfunction createFullPageComponent(tag) {\n  var elementFactory = ReactElement.createFactory(tag);\n  var FullPageComponent = ReactClass.createClass({\n    tagName: tag.toUpperCase(),\n    displayName: 'ReactFullPageComponent' + tag,\n    componentWillUnmount: function () {\n      \"production\" !== process.env.NODE_ENV ? invariant(false, '%s tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, <head>, ' + 'and <body>) reliably and efficiently. To fix this, have a single ' + 'top-level component that never unmounts render these elements.', this.constructor.displayName) : invariant(false);\n    },\n    render: function () {\n      return elementFactory(this.props);\n    }\n  });\n  return FullPageComponent;\n}\n\nmodule.exports = createFullPageComponent;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/createFullPageComponent.js"],"names":["ReactClass","require","ReactElement","invariant","createFullPageComponent","tag","elementFactory","createFactory","FullPageComponent","createClass","tagName","toUpperCase","displayName","componentWillUnmount","process","env","NODE_ENV","constructor","render","props","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA,a,CAEA;;AACA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;AAWA,SAASG,uBAAT,CAAiCC,GAAjC,EAAsC;AACpC,MAAIC,cAAc,GAAGJ,YAAY,CAACK,aAAb,CAA2BF,GAA3B,CAArB;AAEA,MAAIG,iBAAiB,GAAGR,UAAU,CAACS,WAAX,CAAuB;AAC7CC,IAAAA,OAAO,EAAEL,GAAG,CAACM,WAAJ,EADoC;AAE7CC,IAAAA,WAAW,EAAE,2BAA2BP,GAFK;AAI7CQ,IAAAA,oBAAoB,EAAE,YAAW;AAC9B,uBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCb,SAAS,CAChD,KADgD,EAEhD,gEACA,sEADA,GAEA,mEAFA,GAGA,gEALgD,EAMhD,KAAKc,WAAL,CAAiBL,WAN+B,CAAjD,GAOGT,SAAS,CAAC,KAAD,CAPb;AAQD,KAb4C;AAe7Ce,IAAAA,MAAM,EAAE,YAAW;AACjB,aAAOZ,cAAc,CAAC,KAAKa,KAAN,CAArB;AACD;AAjB4C,GAAvB,CAAxB;AAoBA,SAAOX,iBAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBjB,uBAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createFullPageComponent\n * @typechecks\n */\n\n'use strict';\n\n// Defeat circular references by requiring this directly.\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Create a component that will throw an exception when unmounted.\n *\n * Components like <html> <head> and <body> can't be removed or added\n * easily in a cross-browser way, however it's valuable to be able to\n * take advantage of React's reconciliation for styling and <title>\n * management. So we just document it and throw in dangerous cases.\n *\n * @param {string} tag The tag to wrap\n * @return {function} convenience constructor of new component\n */\nfunction createFullPageComponent(tag) {\n  var elementFactory = ReactElement.createFactory(tag);\n\n  var FullPageComponent = ReactClass.createClass({\n    tagName: tag.toUpperCase(),\n    displayName: 'ReactFullPageComponent' + tag,\n\n    componentWillUnmount: function() {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        false,\n        '%s tried to unmount. Because of cross-browser quirks it is ' +\n        'impossible to unmount some top-level components (eg <html>, <head>, ' +\n        'and <body>) reliably and efficiently. To fix this, have a single ' +\n        'top-level component that never unmounts render these elements.',\n        this.constructor.displayName\n      ) : invariant(false));\n    },\n\n    render: function() {\n      return elementFactory(this.props);\n    }\n  });\n\n  return FullPageComponent;\n}\n\nmodule.exports = createFullPageComponent;\n"]},"metadata":{},"sourceType":"script"}