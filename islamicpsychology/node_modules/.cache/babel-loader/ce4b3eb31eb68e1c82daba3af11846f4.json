{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n'use strict';\n\nvar ReactRef = require(\"./ReactRef\");\n\nvar ReactElementValidator = require(\"./ReactElementValidator\");\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\n\n\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(internalInstance._currentElement);\n    }\n\n    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n};\nmodule.exports = ReactReconciler;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactReconciler.js"],"names":["ReactRef","require","ReactElementValidator","attachRefs","_currentElement","ReactReconciler","mountComponent","internalInstance","rootID","transaction","context","markup","process","env","NODE_ENV","checkAndWarnForMutatedProps","getReactMountReady","enqueue","unmountComponent","detachRefs","receiveComponent","nextElement","prevElement","_owner","refsChanged","shouldUpdateRefs","performUpdateIfNecessary","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;AAEA;;;;;;AAIA,SAASE,UAAT,GAAsB;AACpBH,EAAAA,QAAQ,CAACG,UAAT,CAAoB,IAApB,EAA0B,KAAKC,eAA/B;AACD;;AAED,IAAIC,eAAe,GAAG;AAEpB;;;;;;;;;;AAUAC,EAAAA,cAAc,EAAE,UAASC,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC,EAAgDC,OAAhD,EAAyD;AACvE,QAAIC,MAAM,GAAGJ,gBAAgB,CAACD,cAAjB,CAAgCE,MAAhC,EAAwCC,WAAxC,EAAqDC,OAArD,CAAb;;AACA,QAAI,iBAAiBE,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACzCZ,MAAAA,qBAAqB,CAACa,2BAAtB,CACER,gBAAgB,CAACH,eADnB;AAGD;;AACDK,IAAAA,WAAW,CAACO,kBAAZ,GAAiCC,OAAjC,CAAyCd,UAAzC,EAAqDI,gBAArD;AACA,WAAOI,MAAP;AACD,GArBmB;;AAuBpB;;;;;;AAMAO,EAAAA,gBAAgB,EAAE,UAASX,gBAAT,EAA2B;AAC3CP,IAAAA,QAAQ,CAACmB,UAAT,CAAoBZ,gBAApB,EAAsCA,gBAAgB,CAACH,eAAvD;AACAG,IAAAA,gBAAgB,CAACW,gBAAjB;AACD,GAhCmB;;AAkCpB;;;;;;;;;AASAE,EAAAA,gBAAgB,EAAE,UAChBb,gBADgB,EACEc,WADF,EACeZ,WADf,EAC4BC,OAD5B,EAEhB;AACA,QAAIY,WAAW,GAAGf,gBAAgB,CAACH,eAAnC;;AAEA,QAAIiB,WAAW,KAAKC,WAAhB,IAA+BD,WAAW,CAACE,MAAZ,IAAsB,IAAzD,EAA+D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,QAAI,iBAAiBX,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACzCZ,MAAAA,qBAAqB,CAACa,2BAAtB,CAAkDM,WAAlD;AACD;;AAED,QAAIG,WAAW,GAAGxB,QAAQ,CAACyB,gBAAT,CAChBH,WADgB,EAEhBD,WAFgB,CAAlB;;AAKA,QAAIG,WAAJ,EAAiB;AACfxB,MAAAA,QAAQ,CAACmB,UAAT,CAAoBZ,gBAApB,EAAsCe,WAAtC;AACD;;AAEDf,IAAAA,gBAAgB,CAACa,gBAAjB,CAAkCC,WAAlC,EAA+CZ,WAA/C,EAA4DC,OAA5D;;AAEA,QAAIc,WAAJ,EAAiB;AACff,MAAAA,WAAW,CAACO,kBAAZ,GAAiCC,OAAjC,CAAyCd,UAAzC,EAAqDI,gBAArD;AACD;AACF,GA7EmB;;AA+EpB;;;;;;;AAOAmB,EAAAA,wBAAwB,EAAE,UACxBnB,gBADwB,EAExBE,WAFwB,EAGxB;AACAF,IAAAA,gBAAgB,CAACmB,wBAAjB,CAA0CjB,WAA1C;AACD;AA3FmB,CAAtB;AA+FAkB,MAAM,CAACC,OAAP,GAAiBvB,eAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require(\"./ReactRef\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function(internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(\n        internalInstance._currentElement\n      );\n    }\n    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function(internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function(\n    internalInstance, nextElement, transaction, context\n  ) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(\n      prevElement,\n      nextElement\n    );\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(\n    internalInstance,\n    transaction\n  ) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n\n};\n\nmodule.exports = ReactReconciler;\n"]},"metadata":{},"sourceType":"script"}