{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar quoteAttributeValueForBrowser = require(\"./quoteAttributeValueForBrowser\");\n\nvar warning = require(\"./warning\");\n\nfunction shouldIgnoreValue(name, value) {\n  return value == null || DOMProperty.hasBooleanValue[name] && !value || DOMProperty.hasNumericValue[name] && isNaN(value) || DOMProperty.hasPositiveNumericValue[name] && value < 1 || DOMProperty.hasOverloadedBooleanValue[name] && value === false;\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function (name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase(); // data-* attributes should be lowercase; suggest the lowercase version\n\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null; // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n\n    \"production\" !== process.env.NODE_ENV ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : null;\n  };\n}\n/**\n * Operations for dealing with DOM properties.\n */\n\n\nvar DOMPropertyOperations = {\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) && DOMProperty.isStandardName[name]) {\n      if (shouldIgnoreValue(name, value)) {\n        return '';\n      }\n\n      var attributeName = DOMProperty.getAttributeName[name];\n\n      if (DOMProperty.hasBooleanValue[name] || DOMProperty.hasOverloadedBooleanValue[name] && value === true) {\n        return attributeName;\n      }\n\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n\n    return null;\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) && DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(name, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);\n      } else {\n        var propName = DOMProperty.getPropertyName[name]; // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n\n        if (!DOMProperty.hasSideEffects[name] || '' + node[propName] !== '' + value) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        node.removeAttribute(name);\n      } else {\n        node.setAttribute(name, '' + value);\n      }\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) && DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        node.removeAttribute(DOMProperty.getAttributeName[name]);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);\n\n        if (!DOMProperty.hasSideEffects[name] || '' + node[propName] !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  }\n};\nmodule.exports = DOMPropertyOperations;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/DOMPropertyOperations.js"],"names":["DOMProperty","require","quoteAttributeValueForBrowser","warning","shouldIgnoreValue","name","value","hasBooleanValue","hasNumericValue","isNaN","hasPositiveNumericValue","hasOverloadedBooleanValue","process","env","NODE_ENV","reactProps","children","dangerouslySetInnerHTML","key","ref","warnedProperties","warnUnknownProperty","hasOwnProperty","lowerCasedName","toLowerCase","standardName","isCustomAttribute","getPossibleStandardName","DOMPropertyOperations","createMarkupForID","id","ID_ATTRIBUTE_NAME","createMarkupForProperty","isStandardName","attributeName","getAttributeName","setValueForProperty","node","mutationMethod","getMutationMethod","deleteValueForProperty","mustUseAttribute","setAttribute","propName","getPropertyName","hasSideEffects","removeAttribute","undefined","defaultValue","getDefaultValueForProperty","nodeName","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar quoteAttributeValueForBrowser = require(\"./quoteAttributeValueForBrowser\");\nvar warning = require(\"./warning\");\n\nfunction shouldIgnoreValue(name, value) {\n  return value == null ||\n    (DOMProperty.hasBooleanValue[name] && !value) ||\n    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||\n    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||\n    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function(name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] ||\n        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = (\n      DOMProperty.isCustomAttribute(lowerCasedName) ?\n        lowerCasedName :\n      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?\n        DOMProperty.getPossibleStandardName[lowerCasedName] :\n        null\n    );\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      standardName == null,\n      'Unknown DOM property %s. Did you mean %s?',\n      name,\n      standardName\n    ) : null);\n\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function(id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +\n      quoteAttributeValueForBrowser(id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function(name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      if (shouldIgnoreValue(name, value)) {\n        return '';\n      }\n      var attributeName = DOMProperty.getAttributeName[name];\n      if (DOMProperty.hasBooleanValue[name] ||\n          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {\n        return attributeName;\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function(node, name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(name, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n        if (!DOMProperty.hasSideEffects[name] ||\n            ('' + node[propName]) !== ('' + value)) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        node.removeAttribute(name);\n      } else {\n        node.setAttribute(name, '' + value);\n      }\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function(node, name) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        node.removeAttribute(DOMProperty.getAttributeName[name]);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        var defaultValue = DOMProperty.getDefaultValueForProperty(\n          node.nodeName,\n          propName\n        );\n        if (!DOMProperty.hasSideEffects[name] ||\n            ('' + node[propName]) !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nmodule.exports = DOMPropertyOperations;\n"]},"metadata":{},"sourceType":"script"}