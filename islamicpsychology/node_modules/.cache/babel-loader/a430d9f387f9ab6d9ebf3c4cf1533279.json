{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar invariant = require(\"./invariant\");\n\nvar component; // This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\n\nvar nullComponentIDsRegistry = {};\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function (emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\n\nvar ReactEmptyComponentType = function () {};\n\nReactEmptyComponentType.prototype.componentDidMount = function () {\n  var internalInstance = ReactInstanceMap.get(this); // TODO: Make sure we run these methods in the correct order, we shouldn't\n  // need this check. We're going to assume if we're here it means we ran\n  // componentWillUnmount already so there is no internal instance (it gets\n  // removed as part of the unmounting process).\n\n  if (!internalInstance) {\n    return;\n  }\n\n  registerNullComponentID(internalInstance._rootNodeID);\n};\n\nReactEmptyComponentType.prototype.componentWillUnmount = function () {\n  var internalInstance = ReactInstanceMap.get(this); // TODO: Get rid of this check. See TODO in componentDidMount.\n\n  if (!internalInstance) {\n    return;\n  }\n\n  deregisterNullComponentID(internalInstance._rootNodeID);\n};\n\nReactEmptyComponentType.prototype.render = function () {\n  \"production\" !== process.env.NODE_ENV ? invariant(component, 'Trying to return null from a render, but no null placeholder component ' + 'was injected.') : invariant(component);\n  return component();\n};\n\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\n\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\n\n\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\n\n\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponent = {\n  emptyElement: emptyElement,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID\n};\nmodule.exports = ReactEmptyComponent;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactEmptyComponent.js"],"names":["ReactElement","require","ReactInstanceMap","invariant","component","nullComponentIDsRegistry","ReactEmptyComponentInjection","injectEmptyComponent","emptyComponent","createFactory","ReactEmptyComponentType","prototype","componentDidMount","internalInstance","get","registerNullComponentID","_rootNodeID","componentWillUnmount","deregisterNullComponentID","render","process","env","NODE_ENV","emptyElement","createElement","id","isNullComponentID","ReactEmptyComponent","injection","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,SAAJ,C,CACA;AACA;;AACA,IAAIC,wBAAwB,GAAG,EAA/B;AAEA,IAAIC,4BAA4B,GAAG;AACjCC,EAAAA,oBAAoB,EAAE,UAASC,cAAT,EAAyB;AAC7CJ,IAAAA,SAAS,GAAGJ,YAAY,CAACS,aAAb,CAA2BD,cAA3B,CAAZ;AACD;AAHgC,CAAnC;;AAMA,IAAIE,uBAAuB,GAAG,YAAW,CAAE,CAA3C;;AACAA,uBAAuB,CAACC,SAAxB,CAAkCC,iBAAlC,GAAsD,YAAW;AAC/D,MAAIC,gBAAgB,GAAGX,gBAAgB,CAACY,GAAjB,CAAqB,IAArB,CAAvB,CAD+D,CAE/D;AACA;AACA;AACA;;AACA,MAAI,CAACD,gBAAL,EAAuB;AACrB;AACD;;AACDE,EAAAA,uBAAuB,CAACF,gBAAgB,CAACG,WAAlB,CAAvB;AACD,CAVD;;AAWAN,uBAAuB,CAACC,SAAxB,CAAkCM,oBAAlC,GAAyD,YAAW;AAClE,MAAIJ,gBAAgB,GAAGX,gBAAgB,CAACY,GAAjB,CAAqB,IAArB,CAAvB,CADkE,CAElE;;AACA,MAAI,CAACD,gBAAL,EAAuB;AACrB;AACD;;AACDK,EAAAA,yBAAyB,CAACL,gBAAgB,CAACG,WAAlB,CAAzB;AACD,CAPD;;AAQAN,uBAAuB,CAACC,SAAxB,CAAkCQ,MAAlC,GAA2C,YAAW;AACnD,mBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCnB,SAAS,CAChDC,SADgD,EAEhD,4EACA,eAHgD,CAAjD,GAIGD,SAAS,CAACC,SAAD,CAJb;AAKA,SAAOA,SAAS,EAAhB;AACD,CAPD;;AASA,IAAImB,YAAY,GAAGvB,YAAY,CAACwB,aAAb,CAA2Bd,uBAA3B,CAAnB;AAEA;;;;;AAIA,SAASK,uBAAT,CAAiCU,EAAjC,EAAqC;AACnCpB,EAAAA,wBAAwB,CAACoB,EAAD,CAAxB,GAA+B,IAA/B;AACD;AAED;;;;;;AAIA,SAASP,yBAAT,CAAmCO,EAAnC,EAAuC;AACrC,SAAOpB,wBAAwB,CAACoB,EAAD,CAA/B;AACD;AAED;;;;;;AAIA,SAASC,iBAAT,CAA2BD,EAA3B,EAA+B;AAC7B,SAAO,CAAC,CAACpB,wBAAwB,CAACoB,EAAD,CAAjC;AACD;;AAED,IAAIE,mBAAmB,GAAG;AACxBJ,EAAAA,YAAY,EAAEA,YADU;AAExBK,EAAAA,SAAS,EAAEtB,4BAFa;AAGxBoB,EAAAA,iBAAiB,EAAEA;AAHK,CAA1B;AAMAG,MAAM,CAACC,OAAP,GAAiBH,mBAAjB","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar invariant = require(\"./invariant\");\n\nvar component;\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIDsRegistry = {};\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function(emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\n\nvar ReactEmptyComponentType = function() {};\nReactEmptyComponentType.prototype.componentDidMount = function() {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Make sure we run these methods in the correct order, we shouldn't\n  // need this check. We're going to assume if we're here it means we ran\n  // componentWillUnmount already so there is no internal instance (it gets\n  // removed as part of the unmounting process).\n  if (!internalInstance) {\n    return;\n  }\n  registerNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.componentWillUnmount = function() {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Get rid of this check. See TODO in componentDidMount.\n  if (!internalInstance) {\n    return;\n  }\n  deregisterNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.render = function() {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    component,\n    'Trying to return null from a render, but no null placeholder component ' +\n    'was injected.'\n  ) : invariant(component));\n  return component();\n};\n\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponent = {\n  emptyElement: emptyElement,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID\n};\n\nmodule.exports = ReactEmptyComponent;\n"]},"metadata":{},"sourceType":"script"}