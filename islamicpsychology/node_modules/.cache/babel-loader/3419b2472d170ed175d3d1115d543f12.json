{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildReconciler\n * @typechecks static-only\n */\n'use strict';\n\nvar ReactReconciler = require(\"./ReactReconciler\");\n\nvar flattenChildren = require(\"./flattenChildren\");\n\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\n\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n/**\n * ReactChildReconciler provides helpers for initializing or updating a set of\n * children. Its output is suitable for passing it onto ReactMultiChild which\n * does diffed reordering and insertion.\n */\n\n\nvar ReactChildReconciler = {\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildNodes Nested child maps.\n   * @return {?object} A set of child instances.\n   * @internal\n   */\n  instantiateChildren: function (nestedChildNodes, transaction, context) {\n    var children = flattenChildren(nestedChildNodes);\n\n    for (var name in children) {\n      if (children.hasOwnProperty(name)) {\n        var child = children[name]; // The rendered children must be turned into instances as they're\n        // mounted.\n\n        var childInstance = instantiateReactComponent(child, null);\n        children[name] = childInstance;\n      }\n    }\n\n    return children;\n  },\n\n  /**\n   * Updates the rendered children and returns a new set of children.\n   *\n   * @param {?object} prevChildren Previously initialized set of children.\n   * @param {?object} nextNestedChildNodes Nested child maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @return {?object} A new set of child instances.\n   * @internal\n   */\n  updateChildren: function (prevChildren, nextNestedChildNodes, transaction, context) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    var nextChildren = flattenChildren(nextNestedChildNodes);\n\n    if (!nextChildren && !prevChildren) {\n      return null;\n    }\n\n    var name;\n\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          ReactReconciler.unmountComponent(prevChild, name);\n        } // The child must be instantiated before it's mounted.\n\n\n        var nextChildInstance = instantiateReactComponent(nextElement, null);\n        nextChildren[name] = nextChildInstance;\n      }\n    } // Unmount children that are no longer present.\n\n\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        ReactReconciler.unmountComponent(prevChildren[name]);\n      }\n    }\n\n    return nextChildren;\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted.\n   *\n   * @param {?object} renderedChildren Previously initialized set of children.\n   * @internal\n   */\n  unmountChildren: function (renderedChildren) {\n    for (var name in renderedChildren) {\n      var renderedChild = renderedChildren[name];\n      ReactReconciler.unmountComponent(renderedChild);\n    }\n  }\n};\nmodule.exports = ReactChildReconciler;","map":{"version":3,"sources":["C:/Users/apollo/islamicpsychologyapi/node_modules/react/lib/ReactChildReconciler.js"],"names":["ReactReconciler","require","flattenChildren","instantiateReactComponent","shouldUpdateReactComponent","ReactChildReconciler","instantiateChildren","nestedChildNodes","transaction","context","children","name","hasOwnProperty","child","childInstance","updateChildren","prevChildren","nextNestedChildNodes","nextChildren","prevChild","prevElement","_currentElement","nextElement","receiveComponent","unmountComponent","nextChildInstance","unmountChildren","renderedChildren","renderedChild","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildReconciler\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactReconciler = require(\"./ReactReconciler\");\n\nvar flattenChildren = require(\"./flattenChildren\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\n/**\n * ReactChildReconciler provides helpers for initializing or updating a set of\n * children. Its output is suitable for passing it onto ReactMultiChild which\n * does diffed reordering and insertion.\n */\nvar ReactChildReconciler = {\n\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildNodes Nested child maps.\n   * @return {?object} A set of child instances.\n   * @internal\n   */\n  instantiateChildren: function(nestedChildNodes, transaction, context) {\n    var children = flattenChildren(nestedChildNodes);\n    for (var name in children) {\n      if (children.hasOwnProperty(name)) {\n        var child = children[name];\n        // The rendered children must be turned into instances as they're\n        // mounted.\n        var childInstance = instantiateReactComponent(child, null);\n        children[name] = childInstance;\n      }\n    }\n    return children;\n  },\n\n  /**\n   * Updates the rendered children and returns a new set of children.\n   *\n   * @param {?object} prevChildren Previously initialized set of children.\n   * @param {?object} nextNestedChildNodes Nested child maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @return {?object} A new set of child instances.\n   * @internal\n   */\n  updateChildren: function(\n    prevChildren,\n    nextNestedChildNodes,\n    transaction,\n    context) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    var nextChildren = flattenChildren(nextNestedChildNodes);\n    if (!nextChildren && !prevChildren) {\n      return null;\n    }\n    var name;\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      var prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(\n          prevChild, nextElement, transaction, context\n        );\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          ReactReconciler.unmountComponent(prevChild, name);\n        }\n        // The child must be instantiated before it's mounted.\n        var nextChildInstance = instantiateReactComponent(\n          nextElement,\n          null\n        );\n        nextChildren[name] = nextChildInstance;\n      }\n    }\n    // Unmount children that are no longer present.\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) &&\n          !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        ReactReconciler.unmountComponent(prevChildren[name]);\n      }\n    }\n    return nextChildren;\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted.\n   *\n   * @param {?object} renderedChildren Previously initialized set of children.\n   * @internal\n   */\n  unmountChildren: function(renderedChildren) {\n    for (var name in renderedChildren) {\n      var renderedChild = renderedChildren[name];\n      ReactReconciler.unmountComponent(renderedChild);\n    }\n  }\n\n};\n\nmodule.exports = ReactChildReconciler;\n"]},"metadata":{},"sourceType":"script"}